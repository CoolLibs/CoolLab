/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "generate_debug_options.py" and edit the "DebugOptions" function there.
 * -----------------------------------------------------------------------------
 */

#if DEBUG

#include <Cool/ImGui/ImGuiExtras.h>
#include <Cool/Path/Path.h>
#include <Cool/Serialization/as_json.h>
#include <wafl/wafl.hpp>

namespace Cool {
template<typename... Ts>
class DebugOptionsManager; // Forward declare this class so that the friend declaration that comes later on doesn't fail.
}

namespace Lab {

class DebugOptions {
public:
    static void show_framerate_window(std::function<void()> callback)
    {
        if (instance().show_framerate_window)
        {
            ImGui::Begin("Framerate", &instance().show_framerate_window);
            callback();
            ImGui::End();
        }
    }
    [[nodiscard]] static auto show_imgui_demo_window() -> bool& { return instance().show_imgui_demo_window; }
    [[nodiscard]] static auto show_commands_and_registries_debug_windows() -> bool& { return instance().show_commands_and_registries_debug_windows; }
    [[nodiscard]] static auto log_when_rendering() -> bool& { return instance().log_when_rendering; }
    [[nodiscard]] static auto log_when_compiling_nodes() -> bool& { return instance().log_when_compiling_nodes; }
    static void               test_all_variable_widgets__window(std::function<void()> callback)
    {
        if (instance().test_all_variable_widgets__window)
        {
            ImGui::Begin("Test all Variable Widgets", &instance().test_all_variable_widgets__window);
            callback();
            ImGui::End();
        }
    }
    static void test_shaders_compilation__window(std::function<void()> callback)
    {
        if (instance().test_shaders_compilation__window)
        {
            ImGui::Begin("Test Shaders Compilation", &instance().test_shaders_compilation__window);
            callback();
            ImGui::End();
        }
    }

private:
    struct Instance {
        bool show_framerate_window{true};
        bool show_imgui_demo_window{false};
        bool show_commands_and_registries_debug_windows{false};
        bool log_when_rendering{false};
        bool log_when_compiling_nodes{false};
        bool test_all_variable_widgets__window{false};
        bool test_shaders_compilation__window{false};

    private:
        // Serialization
        friend class cereal::access;
        template<class Archive>
        void serialize(Archive& archive)
        {
            archive(
                cereal::make_nvp("Framerate window", show_framerate_window),
                cereal::make_nvp("ImGui Demo window", show_imgui_demo_window),
                cereal::make_nvp("Commands and Registries windows", show_commands_and_registries_debug_windows),
                cereal::make_nvp("Log when rendering", log_when_rendering),
                cereal::make_nvp("Log when compiling nodes", log_when_compiling_nodes),
                cereal::make_nvp("Test all Variable Widgets", test_all_variable_widgets__window),
                cereal::make_nvp("Test Shaders Compilation", test_shaders_compilation__window)
            );
        }
    };

    static void reset_all()
    {
        instance().show_framerate_window                      = true;
        instance().show_imgui_demo_window                     = false;
        instance().show_commands_and_registries_debug_windows = false;
        instance().log_when_rendering                         = false;
        instance().log_when_compiling_nodes                   = false;
        instance().test_all_variable_widgets__window          = false;
        instance().test_shaders_compilation__window           = false;
    }

    static void save_to_file()
    {
        Cool::Serialization::to_json(
            instance(),
            Cool::Path::root() / "cache/debug-options-lab.json",
            "Debug Options"
        );
    }

    static auto load_debug_options() -> Instance
    {
        auto the_instance = Instance{};
        Cool::Serialization::from_json(the_instance, Cool::Path::root() / "cache/debug-options-lab.json")
            .send_error_if_any([](const std::string& message) {
                return Cool::Message{
                    .category = "Loading Debug Options",
                    .message  = message,
                    .severity = Cool::MessageSeverity::Warning,
                };
            },
                               Cool::Log::Debug::console());
        return the_instance;
    }

    static auto instance() -> Instance&
    {
        static auto the_instance = Instance{load_debug_options()};
        return the_instance;
    }

    template<typename... Ts>
    friend class Cool::DebugOptionsManager; // We go through this indirection so that only the files which include "DebugOptionsManager" can call `imgui_ui_for_all_options()`

    static void imgui_ui_for_all_options(std::string_view filter)
    {
        if (wafl::similarity_match({filter, "Framerate window"}) >= wafl::Matches::Strongly)
        {
            ImGui::Checkbox("Framerate window", &instance().show_framerate_window);
        }

        if (wafl::similarity_match({filter, "ImGui Demo window"}) >= wafl::Matches::Strongly)
        {
            ImGui::Checkbox("ImGui Demo window", &instance().show_imgui_demo_window);
        }

        if (wafl::similarity_match({filter, "Commands and Registries windows"}) >= wafl::Matches::Strongly)
        {
            ImGui::Checkbox("Commands and Registries windows", &instance().show_commands_and_registries_debug_windows);
        }

        if (wafl::similarity_match({filter, "Log when rendering"}) >= wafl::Matches::Strongly)
        {
            ImGui::Checkbox("Log when rendering", &instance().log_when_rendering);
        }

        if (wafl::similarity_match({filter, "Log when compiling nodes"}) >= wafl::Matches::Strongly)
        {
            ImGui::Checkbox("Log when compiling nodes", &instance().log_when_compiling_nodes);
        }

        if (wafl::similarity_match({filter, "Test all Variable Widgets"}) >= wafl::Matches::Strongly)
        {
            ImGui::Checkbox("Test all Variable Widgets", &instance().test_all_variable_widgets__window);
        }

        if (wafl::similarity_match({filter, "Test Shaders Compilation"}) >= wafl::Matches::Strongly)
        {
            ImGui::Checkbox("Test Shaders Compilation", &instance().test_shaders_compilation__window);
        }
    }

    static void toggle_first_option(std::string_view filter)
    {
        if (wafl::similarity_match({filter, "Framerate window"}) >= wafl::Matches::Strongly)
        {
            instance().show_framerate_window = !instance().show_framerate_window;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "ImGui Demo window"}) >= wafl::Matches::Strongly)
        {
            instance().show_imgui_demo_window = !instance().show_imgui_demo_window;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Commands and Registries windows"}) >= wafl::Matches::Strongly)
        {
            instance().show_commands_and_registries_debug_windows = !instance().show_commands_and_registries_debug_windows;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when rendering"}) >= wafl::Matches::Strongly)
        {
            instance().log_when_rendering = !instance().log_when_rendering;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when compiling nodes"}) >= wafl::Matches::Strongly)
        {
            instance().log_when_compiling_nodes = !instance().log_when_compiling_nodes;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Test all Variable Widgets"}) >= wafl::Matches::Strongly)
        {
            instance().test_all_variable_widgets__window = !instance().test_all_variable_widgets__window;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Test Shaders Compilation"}) >= wafl::Matches::Strongly)
        {
            instance().test_shaders_compilation__window = !instance().test_shaders_compilation__window;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }
    }
};

} // namespace Lab

#endif
