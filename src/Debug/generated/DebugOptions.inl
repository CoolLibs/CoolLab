/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "generate_debug_options.py" and edit the "DebugOptions" function there.
 * -----------------------------------------------------------------------------
 */

#pragma once
#if DEBUG

#include <Cool/DebugOptions/DebugOptionsManager.h>
#include <Cool/Path/Path.h>
#include <Cool/Serialization/as_json.h>

namespace Lab {

class DebugOptions {
public:
    // clang-format off
[[nodiscard]] static auto show_framerate_window() -> bool& { return instance().show_framerate_window; }
[[nodiscard]] static auto show_imgui_demo_window() -> bool& { return instance().show_imgui_demo_window; }
[[nodiscard]] static auto show_commands_and_registries_debug_windows() -> bool& { return instance().show_commands_and_registries_debug_windows; }
[[nodiscard]] static auto log_when_rendering() -> bool& { return instance().log_when_rendering; }
[[nodiscard]] static auto test_all_variable_widgets() -> bool& { return instance().test_all_variable_widgets; }
    // clang-format on

private:
    struct Instance {
        bool show_framerate_window{true};
        bool show_imgui_demo_window{false};
        bool show_commands_and_registries_debug_windows{false};
        bool log_when_rendering{false};
        bool test_all_variable_widgets{false};

    private:
        // Serialization
        friend class cereal::access;
        template<class Archive>
        void serialize(Archive& archive)
        {
            archive(
                cereal::make_nvp("Framerate window", show_framerate_window),
                cereal::make_nvp("ImGui Demo window", show_imgui_demo_window),
                cereal::make_nvp("Commands and Registries windows", show_commands_and_registries_debug_windows),
                cereal::make_nvp("Log when rendering", log_when_rendering),
                cereal::make_nvp("Test all Variable Widgets", test_all_variable_widgets)
            );
        }
    };

    static void reset_all()
    {
        instance().show_framerate_window                      = true;
        instance().show_imgui_demo_window                     = false;
        instance().show_commands_and_registries_debug_windows = false;
        instance().log_when_rendering                         = false;
        instance().test_all_variable_widgets                  = false;
    }

    static void save_to_file()
    {
        Cool::Serialization::to_json(
            instance(),
            Cool::Path::root() + "/cache--debug-options-lab.json",
            "Debug Options"
        );
    }

    static auto load_debug_options() -> Instance
    {
        auto the_instance = Instance{};
        Cool::Serialization::from_json(the_instance, Cool::Path::root() + "/cache--debug-options-lab.json");
        return the_instance;
    }

    static auto instance() -> Instance&
    {
        static auto the_instance = Instance{load_debug_options()};
        return the_instance;
    }

    template<typename... Ts>
    friend class Cool::DebugOptionsManager; // We go through this indirection so that only the files which include "DebugOptionsManager" can call `imgui_checkboxes_for_all_options()`
    static void imgui_checkboxes_for_all_options(const ImGuiTextFilter& filter)
    {
        if (filter.PassFilter("Framerate window"))
            ImGui::Checkbox("Framerate window", &instance().show_framerate_window);
        if (filter.PassFilter("ImGui Demo window"))
            ImGui::Checkbox("ImGui Demo window", &instance().show_imgui_demo_window);
        if (filter.PassFilter("Commands and Registries windows"))
            ImGui::Checkbox("Commands and Registries windows", &instance().show_commands_and_registries_debug_windows);
        if (filter.PassFilter("Log when rendering"))
            ImGui::Checkbox("Log when rendering", &instance().log_when_rendering);
        if (filter.PassFilter("Test all Variable Widgets"))
            ImGui::Checkbox("Test all Variable Widgets", &instance().test_all_variable_widgets);
    }
};

} // namespace Lab

#endif
