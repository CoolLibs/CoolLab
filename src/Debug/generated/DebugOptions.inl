/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "generate_debug_options.py" and edit the "DebugOptions" function there.
 * -----------------------------------------------------------------------------
 */

#include "Cool/ImGui/ImGuiExtras.h"
#include "Cool/Path/Path.h"
#include "Cool/Serialization/JsonAutoSerializer.hpp"
#include "wafl/wafl.hpp"

namespace Cool {
template<typename... Ts>
class DebugOptionsManager; // Forward declare this class so that the friend declaration that comes later on doesn't fail.
}

namespace Lab {

class DebugOptions {
public:
    [[nodiscard]] static auto generate_dump_file() -> bool& { return json().get<bool>("Info Dump: Generate file", false); }
    [[nodiscard]] static auto copy_info_dump_to_clipboard() -> bool& { return json().get<bool>("Info Dump: Copy to clipboard", false); }
    static void               show_framerate_window(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Framerate window", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Framerate", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
    [[nodiscard]] static auto show_imgui_demo_window() -> bool& { return json().get<bool>("ImGui Demo window", false); }
    static void               show_history_window(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Show history", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("History", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
    [[nodiscard]] static auto show_nodes_and_links_registries() -> bool& { return json().get<bool>("Show nodes and links registries", false); }
    [[nodiscard]] static auto force_rerender_every_frame() -> bool& { return json().get<bool>("Force rerender every frame", false); }
    [[nodiscard]] static auto log_when_rendering() -> bool& { return json().get<bool>("Log when rendering", false); }
    [[nodiscard]] static auto log_when_updating_particles() -> bool& { return json().get<bool>("Log when updating particles", false); }
    [[nodiscard]] static auto log_when_compiling_nodes() -> bool& { return json().get<bool>("Log when compiling nodes", false); }
    [[nodiscard]] static auto log_when_parsing_node_definition() -> bool& { return json().get<bool>("Log when parsing node definition", false); }
    [[nodiscard]] static auto log_when_executing_a_command() -> bool& { return json().get<bool>("Log when executing a command", false); }
    [[nodiscard]] static auto log_project_related_events() -> bool& { return json().get<bool>("Log project-related events", false); }
    static void               show_generated_shader_code(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Show generated shader code", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Nodes Code", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
    static void test_all_variable_widgets__window(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Test all Variable Widgets", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Test all Variable Widgets", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
    static void test_shaders_compilation__window(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Test Shaders Compilation", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Test Shaders Compilation", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }
    static void empty_window(std::function<void()> callback)
    {
        bool& val = json().get<bool>("Open Empty Window", false);
        if (val)
        {
            ImGui::Begin(Cool::icon_fmt("Open Empty Window", ICOMOON_WRENCH).c_str(), &val, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!val) // Window has just been closed manually by the user
                json().save();
        }
    }

private:
    static auto json() -> Cool::JsonAutoSerializer<bool>&
    {
        static auto the_json = Cool::JsonAutoSerializer<bool>{Cool::Path::user_data() / "debug_options_lab.json", false};
        return the_json;
    }

    static void reset_all()
    {
        json().get<bool>("Framerate window", false)                 = false;
        json().get<bool>("ImGui Demo window", false)                = false;
        json().get<bool>("Show history", false)                     = false;
        json().get<bool>("Show nodes and links registries", false)  = false;
        json().get<bool>("Force rerender every frame", false)       = false;
        json().get<bool>("Log when rendering", false)               = false;
        json().get<bool>("Log when updating particles", false)      = false;
        json().get<bool>("Log when compiling nodes", false)         = false;
        json().get<bool>("Log when parsing node definition", false) = false;
        json().get<bool>("Log when executing a command", false)     = false;
        json().get<bool>("Log project-related events", false)       = false;
        json().get<bool>("Show generated shader code", false)       = false;
        json().get<bool>("Test all Variable Widgets", false)        = false;
        json().get<bool>("Test Shaders Compilation", false)         = false;
        json().get<bool>("Open Empty Window", false)                = false;
        json().save();
    }

    static void update()
    {
        json().update();
    }

    template<typename... Ts>
    friend class Cool::DebugOptionsManager; // We go through this indirection so that only the files which include "DebugOptionsManager" can call `imgui_ui_for_all_options()`

    static void imgui_ui_for_all_options(std::string_view filter)
    {
        if (wafl::similarity_match({filter, "Info Dump: Generate file"}) >= wafl::Matches::Strongly)
        {
            json().get<bool>("Info Dump: Generate file", false) = ImGui::Button("##Info Dump: Generate file", {ImGui::GetFrameHeight(), ImGui::GetFrameHeight()});
            ImGui::SameLine(0.f, ImGui::GetStyle().ItemInnerSpacing.x);
            ImGui::Text("Info Dump: Generate file");
            if (ImGui::IsItemClicked())
                json().get<bool>("Info Dump: Generate file", true) = true;

            Cool::ImGuiExtras::help_marker("Creates an info_dump.txt file next to your executable. It can be used when submitting a bug report, in order to give the devs more information.");
        }

        if (wafl::similarity_match({filter, "Info Dump: Copy to clipboard"}) >= wafl::Matches::Strongly)
        {
            json().get<bool>("Info Dump: Copy to clipboard", false) = ImGui::Button("##Info Dump: Copy to clipboard", {ImGui::GetFrameHeight(), ImGui::GetFrameHeight()});
            ImGui::SameLine(0.f, ImGui::GetStyle().ItemInnerSpacing.x);
            ImGui::Text("Info Dump: Copy to clipboard");
            if (ImGui::IsItemClicked())
                json().get<bool>("Info Dump: Copy to clipboard", true) = true;

            Cool::ImGuiExtras::help_marker("Copies an info dump to your clipboard. It can be used when submitting a bug report, in order to give the devs more information.");
        }

        if (wafl::similarity_match({filter, "Framerate window"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Framerate window", false);
            if (Cool::ImGuiExtras::toggle("Framerate window", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "ImGui Demo window"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("ImGui Demo window", false);
            if (Cool::ImGuiExtras::toggle("ImGui Demo window", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Show history"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Show history", false);
            if (Cool::ImGuiExtras::toggle("Show history", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Show nodes and links registries"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Show nodes and links registries", false);
            if (Cool::ImGuiExtras::toggle("Show nodes and links registries", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Force rerender every frame"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Force rerender every frame", false);
            if (Cool::ImGuiExtras::toggle("Force rerender every frame", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Log when rendering"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when rendering", false);
            if (Cool::ImGuiExtras::toggle("Log when rendering", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Log when updating particles"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when updating particles", false);
            if (Cool::ImGuiExtras::toggle("Log when updating particles", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Log when compiling nodes"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when compiling nodes", false);
            if (Cool::ImGuiExtras::toggle("Log when compiling nodes", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Log when parsing node definition"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when parsing node definition", false);
            if (Cool::ImGuiExtras::toggle("Log when parsing node definition", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Log when executing a command"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when executing a command", false);
            if (Cool::ImGuiExtras::toggle("Log when executing a command", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Log project-related events"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log project-related events", false);
            if (Cool::ImGuiExtras::toggle("Log project-related events", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Show generated shader code"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Show generated shader code", false);
            if (Cool::ImGuiExtras::toggle("Show generated shader code", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Test all Variable Widgets"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test all Variable Widgets", false);
            if (Cool::ImGuiExtras::toggle("Test all Variable Widgets", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Test Shaders Compilation"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test Shaders Compilation", false);
            if (Cool::ImGuiExtras::toggle("Test Shaders Compilation", &val))
                json().save();
        }

        if (wafl::similarity_match({filter, "Open Empty Window"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Open Empty Window", false);
            if (Cool::ImGuiExtras::toggle("Open Empty Window", &val))
                json().save();

            Cool::ImGuiExtras::help_marker("Useful when you want some blank space in your windows layout.");
        }
    }

    static void toggle_first_option(std::string_view filter)
    {
        if (wafl::similarity_match({filter, "Info Dump: Generate file"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Info Dump: Generate file", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Info Dump: Copy to clipboard"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Info Dump: Copy to clipboard", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Framerate window"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Framerate window", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "ImGui Demo window"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("ImGui Demo window", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Show history"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Show history", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Show nodes and links registries"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Show nodes and links registries", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Force rerender every frame"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Force rerender every frame", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when rendering"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when rendering", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when updating particles"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when updating particles", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when compiling nodes"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when compiling nodes", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when parsing node definition"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when parsing node definition", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when executing a command"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log when executing a command", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log project-related events"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Log project-related events", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Show generated shader code"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Show generated shader code", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Test all Variable Widgets"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test all Variable Widgets", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Test Shaders Compilation"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Test Shaders Compilation", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Open Empty Window"}) >= wafl::Matches::Strongly)
        {
            bool& val = json().get<bool>("Open Empty Window", false);
            val       = !val;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }
    }
};

} // namespace Lab
