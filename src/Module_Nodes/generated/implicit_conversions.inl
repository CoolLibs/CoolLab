/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "gen_primitive_types.py" and edit the "implicit_conversions" function there.
 * -----------------------------------------------------------------------------
 */

if (from == PrimitiveType::Float && to == PrimitiveType::Angle)
{
    return context.push_function({
        .name       = "Coollab_Float_to_Angle",
        .definition = R"STR(
                float Coollab_Float_to_Angle/*coollabdef*/(float x)
                {
                    return x * TAU;
                }
            )STR",
    });
}

if (from == PrimitiveType::Angle && to == PrimitiveType::Float)
{
    return context.push_function({
        .name       = "Coollab_Angle_to_Float",
        .definition = R"STR(
                float Coollab_Angle_to_Float/*coollabdef*/(float angle)
                {
                    return angle / TAU;
                }
            )STR",
    });
}

if (from == PrimitiveType::Float && to == PrimitiveType::Hue)
    return ""; // No need to do anything for this conversion, the difference is purely semantic.

if (from == PrimitiveType::Hue && to == PrimitiveType::Float)
    return ""; // No need to do anything for this conversion, the difference is purely semantic.

if (from == PrimitiveType::Float && to == PrimitiveType::Int)
{
    return context.push_function({
        .name       = "Coollab_Float_to_Int",
        .definition = R"STR(
                int Coollab_Float_to_Int/*coollabdef*/(float x)
                {
                    return int(floor(x));
                }
            )STR",
    });
}

if (from == PrimitiveType::Int && to == PrimitiveType::Float)
{
    return context.push_function({
        .name       = "Coollab_Int_to_Float",
        .definition = R"STR(
                float Coollab_Int_to_Float/*coollabdef*/(int x)
                {
                    return float(x);
                }
            )STR",
    });
}

if (from == PrimitiveType::Float && to == PrimitiveType::Bool)
{
    return context.push_function({
        .name       = "Coollab_Float_to_Bool",
        .definition = R"STR(
                bool Coollab_Float_to_Bool/*coollabdef*/(float x)
                {
                    return x > 0.5;
                }
            )STR",
    });
}

if (from == PrimitiveType::Bool && to == PrimitiveType::Float)
{
    return context.push_function({
        .name       = "Coollab_Bool_to_Float",
        .definition = R"STR(
                float Coollab_Bool_to_Float/*coollabdef*/(bool b)
                {
                    return b ? 1. : 0.;
                }
            )STR",
    });
}

if (from == PrimitiveType::Angle && to == PrimitiveType::Direction2D)
{
    return context.push_function({
        .name       = "Coollab_Angle_to_Direction2D",
        .definition = R"STR(
                vec2 Coollab_Angle_to_Direction2D/*coollabdef*/(float angle)
                {
                    return vec2(cos(angle), sin(angle));
                }
            )STR",
    });
}

if (from == PrimitiveType::Float && to == PrimitiveType::Direction2D)
{
    return context.push_function({
        .name       = "Coollab_Float_to_Direction2D",
        .definition = R"STR(
                vec2 Coollab_Float_to_Direction2D/*coollabdef*/(float x)
                {
                    float angle = x * TAU;
                    return vec2(cos(angle), sin(angle));
                }
            )STR",
    });
}

if (from == PrimitiveType::Direction2D && to == PrimitiveType::Angle)
{
    return context.push_function({
        .name       = "Coollab_Direction2D_to_Angle",
        .definition = R"STR(
                float Coollab_Direction2D_to_Angle/*coollabdef*/(vec2 dir)
                {
                    return dir.x != 0.f
                                ? atan(dir.y, dir.x)
                                : dir.y > 0.
                                    ? PI / 2.
                                    : -PI / 2.;
                }
            )STR",
    });
}

if (from == PrimitiveType::UV && to == PrimitiveType::Vec2)
    return ""; // No need to do anything for this conversion, the difference is purely semantic.

if (from == PrimitiveType::Vec2 && to == PrimitiveType::UV)
    return ""; // No need to do anything for this conversion, the difference is purely semantic.

if (from == PrimitiveType::Void && to == PrimitiveType::UV)
{
    return context.push_function({
        .name       = "Coollab_Void_to_UV",
        .definition = R"STR(
                vec2 Coollab_Void_to_UV/*coollabdef*/()
                {
                    return coollab_context.uv;
                }
            )STR",
    });
}
