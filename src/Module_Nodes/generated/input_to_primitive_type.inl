/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "generator.py" and edit the "input_to_primitive_type" function there.
 * -----------------------------------------------------------------------------
 */

if (std::holds_alternative<Cool::Input<bool>>(input))
    return PrimitiveType::Bool;

if (std::holds_alternative<Cool::Input<int>>(input))
    return PrimitiveType::Int;

if (std::holds_alternative<Cool::Input<float>>(input))
    return PrimitiveType::Float;

if (std::holds_alternative<Cool::Input<glm::vec2>>(input))
    return PrimitiveType::Vec2;

if (std::holds_alternative<Cool::Input<glm::vec3>>(input))
    return PrimitiveType::Vec3;

if (std::holds_alternative<Cool::Input<glm::vec4>>(input))
    return PrimitiveType::Vec4;

if (std::holds_alternative<Cool::Input<glm::mat2>>(input))
    return PrimitiveType::Mat2;

if (std::holds_alternative<Cool::Input<glm::mat3>>(input))
    return PrimitiveType::Mat3;

if (std::holds_alternative<Cool::Input<glm::mat4>>(input))
    return PrimitiveType::Mat4;

if (std::holds_alternative<Cool::Input<Cool::Point2D>>(input))
    return PrimitiveType::UV;

if (std::holds_alternative<Cool::Input<Cool::Angle>>(input))
    return PrimitiveType::Angle;

if (std::holds_alternative<Cool::Input<Cool::Direction2D>>(input))
    return PrimitiveType::Direction2D;

if (std::holds_alternative<Cool::Input<Cool::Color>>(input) && std::get<Cool::Input<Cool::Color>>(input)._desired_color_space == static_cast<int>(Cool::ColorSpace::CIELAB))
    return PrimitiveType::CIELAB;

if (std::holds_alternative<Cool::Input<Cool::ColorAndAlpha>>(input) && std::get<Cool::Input<Cool::ColorAndAlpha>>(input)._desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::CIELAB_PremultipliedA))
    return PrimitiveType::CIELAB_PremultipliedA;

if (std::holds_alternative<Cool::Input<Cool::ColorAndAlpha>>(input) && std::get<Cool::Input<Cool::ColorAndAlpha>>(input)._desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::CIELAB_StraightA))
    return PrimitiveType::CIELAB_StraightA;

if (std::holds_alternative<Cool::Input<Cool::Color>>(input) && std::get<Cool::Input<Cool::Color>>(input)._desired_color_space == static_cast<int>(Cool::ColorSpace::LinearRGB))
    return PrimitiveType::LinearRGB;

if (std::holds_alternative<Cool::Input<Cool::ColorAndAlpha>>(input) && std::get<Cool::Input<Cool::ColorAndAlpha>>(input)._desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::LinearRGB_PremultipliedA))
    return PrimitiveType::LinearRGB_PremultipliedA;

if (std::holds_alternative<Cool::Input<Cool::ColorAndAlpha>>(input) && std::get<Cool::Input<Cool::ColorAndAlpha>>(input)._desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::LinearRGB_StraightA))
    return PrimitiveType::LinearRGB_StraightA;

if (std::holds_alternative<Cool::Input<Cool::Color>>(input) && std::get<Cool::Input<Cool::Color>>(input)._desired_color_space == static_cast<int>(Cool::ColorSpace::sRGB))
    return PrimitiveType::sRGB;

if (std::holds_alternative<Cool::Input<Cool::ColorAndAlpha>>(input) && std::get<Cool::Input<Cool::ColorAndAlpha>>(input)._desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::sRGB_PremultipliedA))
    return PrimitiveType::sRGB_PremultipliedA;

if (std::holds_alternative<Cool::Input<Cool::ColorAndAlpha>>(input) && std::get<Cool::Input<Cool::ColorAndAlpha>>(input)._desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::sRGB_StraightA))
    return PrimitiveType::sRGB_StraightA;

if (std::holds_alternative<Cool::Input<Cool::Color>>(input) && std::get<Cool::Input<Cool::Color>>(input)._desired_color_space == static_cast<int>(Cool::ColorSpace::HSLuv))
    return PrimitiveType::HSLuv;

if (std::holds_alternative<Cool::Input<Cool::ColorAndAlpha>>(input) && std::get<Cool::Input<Cool::ColorAndAlpha>>(input)._desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::HSLuv_PremultipliedA))
    return PrimitiveType::HSLuv_PremultipliedA;

if (std::holds_alternative<Cool::Input<Cool::ColorAndAlpha>>(input) && std::get<Cool::Input<Cool::ColorAndAlpha>>(input)._desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::HSLuv_StraightA))
    return PrimitiveType::HSLuv_StraightA;