#pragma once

#include <Cool/Dependencies/Input.h>
#include <Cool/Dependencies/InputDefinition.h>
#include <memory>
#include "Cool/Variables/PresetManager.h"
#include "FunctionSignature.h"
#include "NodeInputDefinition.h"
#include "tl/expected.hpp"

namespace Lab {

struct FunctionPieces {
    std::string               name;
    CompleteFunctionSignature signature;
    std::string               body;
};

struct MainFunctionPieces {
    std::string           name;
    MainFunctionSignature signature;
    std::string           body;
};

struct NodeDefinition_Data {
    MainFunctionPieces          main_function{};
    std::vector<FunctionPieces> helper_functions{};

    std::vector<NodeInputDefinition>      inputs{};         // Things that can only come from a pin
    std::vector<Cool::AnyInputDefinition> properties{};     // Things that will default to a widget on the node if nothing is plugged into the pin
    std::vector<std::string>              output_indices{}; // Names of the indices generated by an iteration / duplication process
};

class NodeDefinition {
public:
    static auto make(NodeDefinition_Data const&, std::filesystem::path const& presets_file_path) // Use this instead of the constructor because it is not guaranteed that we will successfully create a NodeDefinition from the data.
        -> tl::expected<NodeDefinition, std::string>;

    auto name() const -> auto const& { return _data.main_function.name; }
    auto signature() const -> auto const& { return _data.main_function.signature.signature; }
    auto parameter_names() const -> auto const& { return _data.main_function.signature.parameter_names; }
    auto function_body() const -> auto const& { return _data.main_function.body; }
    auto inputs() const -> auto const& { return _data.inputs; }
    auto properties() const -> auto const& { return _data.properties; }
    auto output_indices() const -> auto const& { return _data.output_indices; }
    auto helper_functions() const -> auto const& { return _data.helper_functions; }

    auto presets_manager() const -> auto const&
    {
        return *_presets_manager;
    }
    auto imgui_presets(Cool::Settings& settings) -> bool { return _presets_manager->imgui_presets(settings); }

private:
    NodeDefinition(NodeDefinition_Data const&, std::filesystem::path const& presets_file_path); // Use NodeDefinition::make() to create a NodeDefinition

private:
    NodeDefinition_Data                  _data;
    std::shared_ptr<Cool::PresetManager> _presets_manager; // TODO(JF) Make this a gsl::not_null
};

} // namespace Lab
