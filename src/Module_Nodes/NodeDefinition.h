#pragma once

#include <Cool/Dependencies/Input.h>
#include <Cool/Dependencies/InputDefinition.h>
#include "FunctionSignature.h"
#include "NodeInputDefinition.h"

namespace Lab {

struct NodeDefinition_Data {
    std::string       name{};
    FunctionSignature signature{};
    size_t            signature_arity{1};
    std::string       function_body{};

    std::vector<NodeInputDefinition>      inputs{};         // Things that can only come from a pin
    std::vector<Cool::AnyInputDefinition> properties{};     // Things that will default to a widget on the node if nothing is plugged into the pin
    std::vector<std::string>              output_indices{}; // Names of the indices generated by an iteration / repetition process
};

class NodeDefinition {
public:
    NodeDefinition(NodeDefinition_Data const&);

    auto name() const -> auto const& { return _data.name; }
    auto signature() const -> auto const& { return _data.signature; }
    auto signature_arity() const -> auto { return _data.signature_arity; }
    auto function_body() const -> auto const& { return _data.function_body; }
    auto inputs() const -> auto const& { return _data.inputs; }
    auto properties() const -> auto const& { return _data.properties; }
    auto output_indices() const -> auto const& { return _data.output_indices; }

private:
    NodeDefinition_Data _data;
};

} // namespace Lab
