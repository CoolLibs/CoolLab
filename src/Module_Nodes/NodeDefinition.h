#pragma once

#include <Cool/Dependencies/Input.h>
#include <Cool/Dependencies/VariableDefinition.h>
#include <memory>
#include "Cool/Variables/PresetManager.h"
#include "FunctionSignature.h"
#include "NodeVariableDefinition.h"
#include "tl/expected.hpp"

namespace Lab {

struct FunctionPieces {
    std::string               name;
    CompleteFunctionSignature signature;
    std::string               body;
};

struct MainFunctionPieces {
    std::string           name;
    MainFunctionSignature signature;
    std::string           body;
};

struct NodeDefinition_Data {
    MainFunctionPieces                 main_function{};
    std::vector<FunctionPieces>        helper_functions{};
    std::vector<std::filesystem::path> included_files{};

    std::vector<NodeVariableDefinition>      input_functions{}; // Things that can only come from a pin
    std::vector<Cool::AnyVariableDefinition> input_values{};    // Things that will default to a widget on the node if nothing is plugged into the pin
    std::vector<std::string>                 output_indices{};  // Names of the indices generated by an iteration / duplication process
};

class NodeDefinition {
public:
    static auto make(NodeDefinition_Data const&, Cool::PresetsPaths const&) // Use this instead of the constructor because it is not guaranteed that we will successfully create a NodeDefinition from the data.
        -> tl::expected<NodeDefinition, std::string>;

    [[nodiscard]] auto name() const -> auto const& { return _data.main_function.name; }
    [[nodiscard]] auto signature() const -> auto const& { return _data.main_function.signature.signature; }
    [[nodiscard]] auto main_parameter_names() const -> auto const& { return _data.main_function.signature.parameter_names; }
    [[nodiscard]] auto parameter_names() const -> auto const& { return _data.main_function.signature.parameter_names; }
    [[nodiscard]] auto function_body() const -> auto const& { return _data.main_function.body; }
    [[nodiscard]] auto function_inputs() const -> auto const& { return _data.input_functions; }
    [[nodiscard]] auto value_inputs() const -> auto const& { return _data.input_values; }
    [[nodiscard]] auto output_indices() const -> auto const& { return _data.output_indices; }
    [[nodiscard]] auto helper_functions() const -> auto const& { return _data.helper_functions; }
    [[nodiscard]] auto included_files() const -> auto const& { return _data.included_files; }

    [[nodiscard]] auto presets_manager() const -> auto const& { return *_presets_manager; }
    auto               imgui_presets(Cool::Settings& settings) -> bool { return _presets_manager->imgui_presets(settings); }

private:
    NodeDefinition(NodeDefinition_Data const&, Cool::PresetsPaths const&); // Use NodeDefinition::make() to create a NodeDefinition

private:
    NodeDefinition_Data                  _data;
    std::shared_ptr<Cool::PresetManager> _presets_manager; // TODO(JF) Make this a gsl::not_null
};

} // namespace Lab
