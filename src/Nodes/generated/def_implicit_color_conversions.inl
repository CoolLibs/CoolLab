/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "gen_primitive_types.py" and edit the "def_implicit_color_conversions" function there.
 * -----------------------------------------------------------------------------
 */

static auto gen_Coollab_Oklab_StraightA_from_Oklab() -> Function
{
    return {
        .name       = "Coollab_Oklab_StraightA_from_Oklab",
        .definition = R"STR(
                                vec4 Coollab_Oklab_StraightA_from_Oklab(vec3 from)
                                {
                                    
                        vec3 to = (from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_PremultipliedA_from_Oklab() -> Function
{
    return {
        .name       = "Coollab_Oklab_PremultipliedA_from_Oklab",
        .definition = R"STR(
                                vec4 Coollab_Oklab_PremultipliedA_from_Oklab(vec3 from)
                                {
                                    
                        vec3 to = (from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_from_Oklab_StraightA() -> Function
{
    return {
        .name       = "Coollab_Oklab_from_Oklab_StraightA",
        .definition = R"STR(
                                vec3 Coollab_Oklab_from_Oklab_StraightA(vec4 from)
                                {
                                    
                        vec3 to = (Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_PremultipliedA_from_Oklab_StraightA() -> Function
{
    return {
        .name       = "Coollab_Oklab_PremultipliedA_from_Oklab_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_PremultipliedA_from_Oklab_StraightA(vec4 from)
                                {
                                    
                        vec3 to = (from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_from_Oklab_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Oklab_from_Oklab_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_Oklab_from_Oklab_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = (from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_StraightA_from_Oklab_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Oklab_StraightA_from_Oklab_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_StraightA_from_Oklab_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = (Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_from_Oklab() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_from_Oklab",
        .definition = R"STR(
                                vec3 Coollab_LinearRGB_from_Oklab(vec3 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Oklab(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_StraightA_from_Oklab() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_StraightA_from_Oklab",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_StraightA_from_Oklab(vec3 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Oklab(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_PremultipliedA_from_Oklab() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_PremultipliedA_from_Oklab",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_PremultipliedA_from_Oklab(vec3 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Oklab(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_from_Oklab_StraightA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_from_Oklab_StraightA",
        .definition = R"STR(
                                vec3 Coollab_LinearRGB_from_Oklab_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Oklab(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_StraightA_from_Oklab_StraightA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_StraightA_from_Oklab_StraightA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_StraightA_from_Oklab_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Oklab(from.xyz);
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_PremultipliedA_from_Oklab_StraightA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_PremultipliedA_from_Oklab_StraightA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_PremultipliedA_from_Oklab_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Oklab(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_from_Oklab_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_from_Oklab_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_LinearRGB_from_Oklab_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Oklab(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_StraightA_from_Oklab_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_StraightA_from_Oklab_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_StraightA_from_Oklab_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Oklab(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_PremultipliedA_from_Oklab_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_PremultipliedA_from_Oklab_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_PremultipliedA_from_Oklab_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_LinearRGB_from_Oklab(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_from_Oklab() -> Function
{
    return {
        .name       = "Coollab_sRGB_from_Oklab",
        .definition = R"STR(
                                vec3 Coollab_sRGB_from_Oklab(vec3 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Oklab(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_StraightA_from_Oklab() -> Function
{
    return {
        .name       = "Coollab_sRGB_StraightA_from_Oklab",
        .definition = R"STR(
                                vec4 Coollab_sRGB_StraightA_from_Oklab(vec3 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Oklab(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_PremultipliedA_from_Oklab() -> Function
{
    return {
        .name       = "Coollab_sRGB_PremultipliedA_from_Oklab",
        .definition = R"STR(
                                vec4 Coollab_sRGB_PremultipliedA_from_Oklab(vec3 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Oklab(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_from_Oklab_StraightA() -> Function
{
    return {
        .name       = "Coollab_sRGB_from_Oklab_StraightA",
        .definition = R"STR(
                                vec3 Coollab_sRGB_from_Oklab_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Oklab(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_StraightA_from_Oklab_StraightA() -> Function
{
    return {
        .name       = "Coollab_sRGB_StraightA_from_Oklab_StraightA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_StraightA_from_Oklab_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Oklab(from.xyz);
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_PremultipliedA_from_Oklab_StraightA() -> Function
{
    return {
        .name       = "Coollab_sRGB_PremultipliedA_from_Oklab_StraightA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_PremultipliedA_from_Oklab_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Oklab(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_from_Oklab_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_sRGB_from_Oklab_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_sRGB_from_Oklab_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Oklab(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_StraightA_from_Oklab_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_sRGB_StraightA_from_Oklab_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_StraightA_from_Oklab_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Oklab(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_PremultipliedA_from_Oklab_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_sRGB_PremultipliedA_from_Oklab_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_PremultipliedA_from_Oklab_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_sRGB_from_Oklab(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_from_Oklab() -> Function
{
    return {
        .name       = "Coollab_Okhsl_from_Oklab",
        .definition = R"STR(
                                vec3 Coollab_Okhsl_from_Oklab(vec3 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Oklab(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_StraightA_from_Oklab() -> Function
{
    return {
        .name       = "Coollab_Okhsl_StraightA_from_Oklab",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_StraightA_from_Oklab(vec3 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Oklab(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_PremultipliedA_from_Oklab() -> Function
{
    return {
        .name       = "Coollab_Okhsl_PremultipliedA_from_Oklab",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_PremultipliedA_from_Oklab(vec3 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Oklab(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_from_Oklab_StraightA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_from_Oklab_StraightA",
        .definition = R"STR(
                                vec3 Coollab_Okhsl_from_Oklab_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Oklab(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_StraightA_from_Oklab_StraightA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_StraightA_from_Oklab_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_StraightA_from_Oklab_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Oklab(from.xyz);
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_PremultipliedA_from_Oklab_StraightA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_PremultipliedA_from_Oklab_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_PremultipliedA_from_Oklab_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Oklab(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_from_Oklab_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_from_Oklab_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_Okhsl_from_Oklab_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Oklab(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_StraightA_from_Oklab_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_StraightA_from_Oklab_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_StraightA_from_Oklab_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Oklab(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_PremultipliedA_from_Oklab_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_PremultipliedA_from_Oklab_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_PremultipliedA_from_Oklab_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_Okhsl_from_Oklab(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_from_Oklab() -> Function
{
    return {
        .name       = "Coollab_Float_from_Oklab",
        .definition = R"STR(
                                float Coollab_Float_from_Oklab(vec3 from)
                                {
                                    
                        float to = Cool_Float_from_Oklab(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_Oklab() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_Oklab",
        .definition = R"STR(
                                vec2 Coollab_Float_StraightA_from_Oklab(vec3 from)
                                {
                                    
                        float to = Cool_Float_from_Oklab(from);
                        return vec2(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_Oklab() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_Oklab",
        .definition = R"STR(
                                vec2 Coollab_Float_PremultipliedA_from_Oklab(vec3 from)
                                {
                                    
                        float to = Cool_Float_from_Oklab(from);
                        return vec2(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_from_Oklab_StraightA() -> Function
{
    return {
        .name       = "Coollab_Float_from_Oklab_StraightA",
        .definition = R"STR(
                                float Coollab_Float_from_Oklab_StraightA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_Oklab(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_Oklab_StraightA() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_Oklab_StraightA",
        .definition = R"STR(
                                vec2 Coollab_Float_StraightA_from_Oklab_StraightA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_Oklab(from.xyz);
                        return Cool_apply_straight_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_Oklab_StraightA() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_Oklab_StraightA",
        .definition = R"STR(
                                vec2 Coollab_Float_PremultipliedA_from_Oklab_StraightA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_Oklab(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_from_Oklab_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Float_from_Oklab_PremultipliedA",
        .definition = R"STR(
                                float Coollab_Float_from_Oklab_PremultipliedA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_Oklab(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_Oklab_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_Oklab_PremultipliedA",
        .definition = R"STR(
                                vec2 Coollab_Float_StraightA_from_Oklab_PremultipliedA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_Oklab(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_Oklab_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_Oklab_PremultipliedA",
        .definition = R"STR(
                                vec2 Coollab_Float_PremultipliedA_from_Oklab_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        float to = Cool_Float_from_Oklab(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_from_LinearRGB() -> Function
{
    return {
        .name       = "Coollab_Oklab_from_LinearRGB",
        .definition = R"STR(
                                vec3 Coollab_Oklab_from_LinearRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_LinearRGB(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_StraightA_from_LinearRGB() -> Function
{
    return {
        .name       = "Coollab_Oklab_StraightA_from_LinearRGB",
        .definition = R"STR(
                                vec4 Coollab_Oklab_StraightA_from_LinearRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_LinearRGB(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_PremultipliedA_from_LinearRGB() -> Function
{
    return {
        .name       = "Coollab_Oklab_PremultipliedA_from_LinearRGB",
        .definition = R"STR(
                                vec4 Coollab_Oklab_PremultipliedA_from_LinearRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_LinearRGB(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_from_LinearRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Oklab_from_LinearRGB_StraightA",
        .definition = R"STR(
                                vec3 Coollab_Oklab_from_LinearRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_LinearRGB(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_StraightA_from_LinearRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Oklab_StraightA_from_LinearRGB_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_StraightA_from_LinearRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_LinearRGB(from.xyz);
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_PremultipliedA_from_LinearRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Oklab_PremultipliedA_from_LinearRGB_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_PremultipliedA_from_LinearRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_LinearRGB(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_from_LinearRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Oklab_from_LinearRGB_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_Oklab_from_LinearRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_LinearRGB(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_StraightA_from_LinearRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Oklab_StraightA_from_LinearRGB_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_StraightA_from_LinearRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_LinearRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_PremultipliedA_from_LinearRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Oklab_PremultipliedA_from_LinearRGB_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_PremultipliedA_from_LinearRGB_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_Oklab_from_LinearRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_StraightA_from_LinearRGB() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_StraightA_from_LinearRGB",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_StraightA_from_LinearRGB(vec3 from)
                                {
                                    
                        vec3 to = (from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_PremultipliedA_from_LinearRGB() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_PremultipliedA_from_LinearRGB",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_PremultipliedA_from_LinearRGB(vec3 from)
                                {
                                    
                        vec3 to = (from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_from_LinearRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_from_LinearRGB_StraightA",
        .definition = R"STR(
                                vec3 Coollab_LinearRGB_from_LinearRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = (Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_PremultipliedA_from_LinearRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_PremultipliedA_from_LinearRGB_StraightA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_PremultipliedA_from_LinearRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = (from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_from_LinearRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_from_LinearRGB_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_LinearRGB_from_LinearRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = (from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_StraightA_from_LinearRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_StraightA_from_LinearRGB_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_StraightA_from_LinearRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = (Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_from_LinearRGB() -> Function
{
    return {
        .name       = "Coollab_sRGB_from_LinearRGB",
        .definition = R"STR(
                                vec3 Coollab_sRGB_from_LinearRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_LinearRGB(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_StraightA_from_LinearRGB() -> Function
{
    return {
        .name       = "Coollab_sRGB_StraightA_from_LinearRGB",
        .definition = R"STR(
                                vec4 Coollab_sRGB_StraightA_from_LinearRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_LinearRGB(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_PremultipliedA_from_LinearRGB() -> Function
{
    return {
        .name       = "Coollab_sRGB_PremultipliedA_from_LinearRGB",
        .definition = R"STR(
                                vec4 Coollab_sRGB_PremultipliedA_from_LinearRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_LinearRGB(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_from_LinearRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_sRGB_from_LinearRGB_StraightA",
        .definition = R"STR(
                                vec3 Coollab_sRGB_from_LinearRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_LinearRGB(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_StraightA_from_LinearRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_sRGB_StraightA_from_LinearRGB_StraightA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_StraightA_from_LinearRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_LinearRGB(from.xyz);
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_PremultipliedA_from_LinearRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_sRGB_PremultipliedA_from_LinearRGB_StraightA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_PremultipliedA_from_LinearRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_LinearRGB(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_from_LinearRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_sRGB_from_LinearRGB_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_sRGB_from_LinearRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_LinearRGB(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_StraightA_from_LinearRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_sRGB_StraightA_from_LinearRGB_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_StraightA_from_LinearRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_LinearRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_PremultipliedA_from_LinearRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_sRGB_PremultipliedA_from_LinearRGB_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_PremultipliedA_from_LinearRGB_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_sRGB_from_LinearRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_from_LinearRGB() -> Function
{
    return {
        .name       = "Coollab_Okhsl_from_LinearRGB",
        .definition = R"STR(
                                vec3 Coollab_Okhsl_from_LinearRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_LinearRGB(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_StraightA_from_LinearRGB() -> Function
{
    return {
        .name       = "Coollab_Okhsl_StraightA_from_LinearRGB",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_StraightA_from_LinearRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_LinearRGB(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_PremultipliedA_from_LinearRGB() -> Function
{
    return {
        .name       = "Coollab_Okhsl_PremultipliedA_from_LinearRGB",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_PremultipliedA_from_LinearRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_LinearRGB(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_from_LinearRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_from_LinearRGB_StraightA",
        .definition = R"STR(
                                vec3 Coollab_Okhsl_from_LinearRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_LinearRGB(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_StraightA_from_LinearRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_StraightA_from_LinearRGB_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_StraightA_from_LinearRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_LinearRGB(from.xyz);
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_PremultipliedA_from_LinearRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_PremultipliedA_from_LinearRGB_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_PremultipliedA_from_LinearRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_LinearRGB(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_from_LinearRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_from_LinearRGB_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_Okhsl_from_LinearRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_LinearRGB(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_StraightA_from_LinearRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_StraightA_from_LinearRGB_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_StraightA_from_LinearRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_LinearRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_PremultipliedA_from_LinearRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_PremultipliedA_from_LinearRGB_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_PremultipliedA_from_LinearRGB_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_Okhsl_from_LinearRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_from_LinearRGB() -> Function
{
    return {
        .name       = "Coollab_Float_from_LinearRGB",
        .definition = R"STR(
                                float Coollab_Float_from_LinearRGB(vec3 from)
                                {
                                    
                        float to = Cool_Float_from_LinearRGB(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_LinearRGB() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_LinearRGB",
        .definition = R"STR(
                                vec2 Coollab_Float_StraightA_from_LinearRGB(vec3 from)
                                {
                                    
                        float to = Cool_Float_from_LinearRGB(from);
                        return vec2(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_LinearRGB() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_LinearRGB",
        .definition = R"STR(
                                vec2 Coollab_Float_PremultipliedA_from_LinearRGB(vec3 from)
                                {
                                    
                        float to = Cool_Float_from_LinearRGB(from);
                        return vec2(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_from_LinearRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Float_from_LinearRGB_StraightA",
        .definition = R"STR(
                                float Coollab_Float_from_LinearRGB_StraightA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_LinearRGB(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_LinearRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_LinearRGB_StraightA",
        .definition = R"STR(
                                vec2 Coollab_Float_StraightA_from_LinearRGB_StraightA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_LinearRGB(from.xyz);
                        return Cool_apply_straight_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_LinearRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_LinearRGB_StraightA",
        .definition = R"STR(
                                vec2 Coollab_Float_PremultipliedA_from_LinearRGB_StraightA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_LinearRGB(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_from_LinearRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Float_from_LinearRGB_PremultipliedA",
        .definition = R"STR(
                                float Coollab_Float_from_LinearRGB_PremultipliedA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_LinearRGB(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_LinearRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_LinearRGB_PremultipliedA",
        .definition = R"STR(
                                vec2 Coollab_Float_StraightA_from_LinearRGB_PremultipliedA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_LinearRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_LinearRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_LinearRGB_PremultipliedA",
        .definition = R"STR(
                                vec2 Coollab_Float_PremultipliedA_from_LinearRGB_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        float to = Cool_Float_from_LinearRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_from_sRGB() -> Function
{
    return {
        .name       = "Coollab_Oklab_from_sRGB",
        .definition = R"STR(
                                vec3 Coollab_Oklab_from_sRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_sRGB(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_StraightA_from_sRGB() -> Function
{
    return {
        .name       = "Coollab_Oklab_StraightA_from_sRGB",
        .definition = R"STR(
                                vec4 Coollab_Oklab_StraightA_from_sRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_sRGB(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_PremultipliedA_from_sRGB() -> Function
{
    return {
        .name       = "Coollab_Oklab_PremultipliedA_from_sRGB",
        .definition = R"STR(
                                vec4 Coollab_Oklab_PremultipliedA_from_sRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_sRGB(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_from_sRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Oklab_from_sRGB_StraightA",
        .definition = R"STR(
                                vec3 Coollab_Oklab_from_sRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_sRGB(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_StraightA_from_sRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Oklab_StraightA_from_sRGB_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_StraightA_from_sRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_sRGB(from.xyz);
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_PremultipliedA_from_sRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Oklab_PremultipliedA_from_sRGB_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_PremultipliedA_from_sRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_sRGB(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_from_sRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Oklab_from_sRGB_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_Oklab_from_sRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_sRGB(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_StraightA_from_sRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Oklab_StraightA_from_sRGB_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_StraightA_from_sRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_sRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_PremultipliedA_from_sRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Oklab_PremultipliedA_from_sRGB_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_PremultipliedA_from_sRGB_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_Oklab_from_sRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_from_sRGB() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_from_sRGB",
        .definition = R"STR(
                                vec3 Coollab_LinearRGB_from_sRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_sRGB(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_StraightA_from_sRGB() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_StraightA_from_sRGB",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_StraightA_from_sRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_sRGB(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_PremultipliedA_from_sRGB() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_PremultipliedA_from_sRGB",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_PremultipliedA_from_sRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_sRGB(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_from_sRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_from_sRGB_StraightA",
        .definition = R"STR(
                                vec3 Coollab_LinearRGB_from_sRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_sRGB(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_StraightA_from_sRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_StraightA_from_sRGB_StraightA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_StraightA_from_sRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_sRGB(from.xyz);
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_PremultipliedA_from_sRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_PremultipliedA_from_sRGB_StraightA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_PremultipliedA_from_sRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_sRGB(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_from_sRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_from_sRGB_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_LinearRGB_from_sRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_sRGB(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_StraightA_from_sRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_StraightA_from_sRGB_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_StraightA_from_sRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_sRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_PremultipliedA_from_sRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_PremultipliedA_from_sRGB_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_PremultipliedA_from_sRGB_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_LinearRGB_from_sRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_StraightA_from_sRGB() -> Function
{
    return {
        .name       = "Coollab_sRGB_StraightA_from_sRGB",
        .definition = R"STR(
                                vec4 Coollab_sRGB_StraightA_from_sRGB(vec3 from)
                                {
                                    
                        vec3 to = (from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_PremultipliedA_from_sRGB() -> Function
{
    return {
        .name       = "Coollab_sRGB_PremultipliedA_from_sRGB",
        .definition = R"STR(
                                vec4 Coollab_sRGB_PremultipliedA_from_sRGB(vec3 from)
                                {
                                    
                        vec3 to = (from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_from_sRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_sRGB_from_sRGB_StraightA",
        .definition = R"STR(
                                vec3 Coollab_sRGB_from_sRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = (Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_PremultipliedA_from_sRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_sRGB_PremultipliedA_from_sRGB_StraightA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_PremultipliedA_from_sRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = (from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_from_sRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_sRGB_from_sRGB_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_sRGB_from_sRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = (from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_StraightA_from_sRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_sRGB_StraightA_from_sRGB_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_StraightA_from_sRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = (Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_from_sRGB() -> Function
{
    return {
        .name       = "Coollab_Okhsl_from_sRGB",
        .definition = R"STR(
                                vec3 Coollab_Okhsl_from_sRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_sRGB(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_StraightA_from_sRGB() -> Function
{
    return {
        .name       = "Coollab_Okhsl_StraightA_from_sRGB",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_StraightA_from_sRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_sRGB(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_PremultipliedA_from_sRGB() -> Function
{
    return {
        .name       = "Coollab_Okhsl_PremultipliedA_from_sRGB",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_PremultipliedA_from_sRGB(vec3 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_sRGB(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_from_sRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_from_sRGB_StraightA",
        .definition = R"STR(
                                vec3 Coollab_Okhsl_from_sRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_sRGB(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_StraightA_from_sRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_StraightA_from_sRGB_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_StraightA_from_sRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_sRGB(from.xyz);
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_PremultipliedA_from_sRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_PremultipliedA_from_sRGB_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_PremultipliedA_from_sRGB_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_sRGB(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_from_sRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_from_sRGB_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_Okhsl_from_sRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_sRGB(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_StraightA_from_sRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_StraightA_from_sRGB_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_StraightA_from_sRGB_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_sRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_PremultipliedA_from_sRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_PremultipliedA_from_sRGB_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_PremultipliedA_from_sRGB_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_Okhsl_from_sRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_from_sRGB() -> Function
{
    return {
        .name       = "Coollab_Float_from_sRGB",
        .definition = R"STR(
                                float Coollab_Float_from_sRGB(vec3 from)
                                {
                                    
                        float to = Cool_Float_from_sRGB(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_sRGB() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_sRGB",
        .definition = R"STR(
                                vec2 Coollab_Float_StraightA_from_sRGB(vec3 from)
                                {
                                    
                        float to = Cool_Float_from_sRGB(from);
                        return vec2(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_sRGB() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_sRGB",
        .definition = R"STR(
                                vec2 Coollab_Float_PremultipliedA_from_sRGB(vec3 from)
                                {
                                    
                        float to = Cool_Float_from_sRGB(from);
                        return vec2(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_from_sRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Float_from_sRGB_StraightA",
        .definition = R"STR(
                                float Coollab_Float_from_sRGB_StraightA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_sRGB(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_sRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_sRGB_StraightA",
        .definition = R"STR(
                                vec2 Coollab_Float_StraightA_from_sRGB_StraightA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_sRGB(from.xyz);
                        return Cool_apply_straight_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_sRGB_StraightA() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_sRGB_StraightA",
        .definition = R"STR(
                                vec2 Coollab_Float_PremultipliedA_from_sRGB_StraightA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_sRGB(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_from_sRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Float_from_sRGB_PremultipliedA",
        .definition = R"STR(
                                float Coollab_Float_from_sRGB_PremultipliedA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_sRGB(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_sRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_sRGB_PremultipliedA",
        .definition = R"STR(
                                vec2 Coollab_Float_StraightA_from_sRGB_PremultipliedA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_sRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_sRGB_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_sRGB_PremultipliedA",
        .definition = R"STR(
                                vec2 Coollab_Float_PremultipliedA_from_sRGB_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        float to = Cool_Float_from_sRGB(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_from_Okhsl() -> Function
{
    return {
        .name       = "Coollab_Oklab_from_Okhsl",
        .definition = R"STR(
                                vec3 Coollab_Oklab_from_Okhsl(vec3 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Okhsl(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_StraightA_from_Okhsl() -> Function
{
    return {
        .name       = "Coollab_Oklab_StraightA_from_Okhsl",
        .definition = R"STR(
                                vec4 Coollab_Oklab_StraightA_from_Okhsl(vec3 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Okhsl(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_PremultipliedA_from_Okhsl() -> Function
{
    return {
        .name       = "Coollab_Oklab_PremultipliedA_from_Okhsl",
        .definition = R"STR(
                                vec4 Coollab_Oklab_PremultipliedA_from_Okhsl(vec3 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Okhsl(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_from_Okhsl_StraightA() -> Function
{
    return {
        .name       = "Coollab_Oklab_from_Okhsl_StraightA",
        .definition = R"STR(
                                vec3 Coollab_Oklab_from_Okhsl_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Okhsl(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_StraightA_from_Okhsl_StraightA() -> Function
{
    return {
        .name       = "Coollab_Oklab_StraightA_from_Okhsl_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_StraightA_from_Okhsl_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Okhsl(from.xyz);
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_PremultipliedA_from_Okhsl_StraightA() -> Function
{
    return {
        .name       = "Coollab_Oklab_PremultipliedA_from_Okhsl_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_PremultipliedA_from_Okhsl_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Okhsl(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_from_Okhsl_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Oklab_from_Okhsl_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_Oklab_from_Okhsl_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Okhsl(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_StraightA_from_Okhsl_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Oklab_StraightA_from_Okhsl_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_StraightA_from_Okhsl_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Okhsl(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_PremultipliedA_from_Okhsl_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Oklab_PremultipliedA_from_Okhsl_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_PremultipliedA_from_Okhsl_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_Oklab_from_Okhsl(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_from_Okhsl() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_from_Okhsl",
        .definition = R"STR(
                                vec3 Coollab_LinearRGB_from_Okhsl(vec3 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Okhsl(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_StraightA_from_Okhsl() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_StraightA_from_Okhsl",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_StraightA_from_Okhsl(vec3 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Okhsl(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_PremultipliedA_from_Okhsl() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_PremultipliedA_from_Okhsl",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_PremultipliedA_from_Okhsl(vec3 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Okhsl(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_from_Okhsl_StraightA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_from_Okhsl_StraightA",
        .definition = R"STR(
                                vec3 Coollab_LinearRGB_from_Okhsl_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Okhsl(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_StraightA_from_Okhsl_StraightA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_StraightA_from_Okhsl_StraightA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_StraightA_from_Okhsl_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Okhsl(from.xyz);
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_PremultipliedA_from_Okhsl_StraightA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_PremultipliedA_from_Okhsl_StraightA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_PremultipliedA_from_Okhsl_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Okhsl(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_from_Okhsl_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_from_Okhsl_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_LinearRGB_from_Okhsl_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Okhsl(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_StraightA_from_Okhsl_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_StraightA_from_Okhsl_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_StraightA_from_Okhsl_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Okhsl(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_PremultipliedA_from_Okhsl_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_PremultipliedA_from_Okhsl_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_PremultipliedA_from_Okhsl_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_LinearRGB_from_Okhsl(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_from_Okhsl() -> Function
{
    return {
        .name       = "Coollab_sRGB_from_Okhsl",
        .definition = R"STR(
                                vec3 Coollab_sRGB_from_Okhsl(vec3 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Okhsl(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_StraightA_from_Okhsl() -> Function
{
    return {
        .name       = "Coollab_sRGB_StraightA_from_Okhsl",
        .definition = R"STR(
                                vec4 Coollab_sRGB_StraightA_from_Okhsl(vec3 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Okhsl(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_PremultipliedA_from_Okhsl() -> Function
{
    return {
        .name       = "Coollab_sRGB_PremultipliedA_from_Okhsl",
        .definition = R"STR(
                                vec4 Coollab_sRGB_PremultipliedA_from_Okhsl(vec3 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Okhsl(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_from_Okhsl_StraightA() -> Function
{
    return {
        .name       = "Coollab_sRGB_from_Okhsl_StraightA",
        .definition = R"STR(
                                vec3 Coollab_sRGB_from_Okhsl_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Okhsl(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_StraightA_from_Okhsl_StraightA() -> Function
{
    return {
        .name       = "Coollab_sRGB_StraightA_from_Okhsl_StraightA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_StraightA_from_Okhsl_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Okhsl(from.xyz);
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_PremultipliedA_from_Okhsl_StraightA() -> Function
{
    return {
        .name       = "Coollab_sRGB_PremultipliedA_from_Okhsl_StraightA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_PremultipliedA_from_Okhsl_StraightA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Okhsl(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_from_Okhsl_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_sRGB_from_Okhsl_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_sRGB_from_Okhsl_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Okhsl(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_StraightA_from_Okhsl_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_sRGB_StraightA_from_Okhsl_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_StraightA_from_Okhsl_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Okhsl(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_PremultipliedA_from_Okhsl_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_sRGB_PremultipliedA_from_Okhsl_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_PremultipliedA_from_Okhsl_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_sRGB_from_Okhsl(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_StraightA_from_Okhsl() -> Function
{
    return {
        .name       = "Coollab_Okhsl_StraightA_from_Okhsl",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_StraightA_from_Okhsl(vec3 from)
                                {
                                    
                        vec3 to = (from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_PremultipliedA_from_Okhsl() -> Function
{
    return {
        .name       = "Coollab_Okhsl_PremultipliedA_from_Okhsl",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_PremultipliedA_from_Okhsl(vec3 from)
                                {
                                    
                        vec3 to = (from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_from_Okhsl_StraightA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_from_Okhsl_StraightA",
        .definition = R"STR(
                                vec3 Coollab_Okhsl_from_Okhsl_StraightA(vec4 from)
                                {
                                    
                        vec3 to = (Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_PremultipliedA_from_Okhsl_StraightA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_PremultipliedA_from_Okhsl_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_PremultipliedA_from_Okhsl_StraightA(vec4 from)
                                {
                                    
                        vec3 to = (from.xyz);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_from_Okhsl_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_from_Okhsl_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_Okhsl_from_Okhsl_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = (from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_StraightA_from_Okhsl_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_StraightA_from_Okhsl_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_StraightA_from_Okhsl_PremultipliedA(vec4 from)
                                {
                                    
                        vec3 to = (Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_color(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_from_Okhsl() -> Function
{
    return {
        .name       = "Coollab_Float_from_Okhsl",
        .definition = R"STR(
                                float Coollab_Float_from_Okhsl(vec3 from)
                                {
                                    
                        float to = Cool_Float_from_Okhsl(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_Okhsl() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_Okhsl",
        .definition = R"STR(
                                vec2 Coollab_Float_StraightA_from_Okhsl(vec3 from)
                                {
                                    
                        float to = Cool_Float_from_Okhsl(from);
                        return vec2(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_Okhsl() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_Okhsl",
        .definition = R"STR(
                                vec2 Coollab_Float_PremultipliedA_from_Okhsl(vec3 from)
                                {
                                    
                        float to = Cool_Float_from_Okhsl(from);
                        return vec2(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_from_Okhsl_StraightA() -> Function
{
    return {
        .name       = "Coollab_Float_from_Okhsl_StraightA",
        .definition = R"STR(
                                float Coollab_Float_from_Okhsl_StraightA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_Okhsl(Cool_premultiply_color(from.xyz, from.a));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_Okhsl_StraightA() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_Okhsl_StraightA",
        .definition = R"STR(
                                vec2 Coollab_Float_StraightA_from_Okhsl_StraightA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_Okhsl(from.xyz);
                        return Cool_apply_straight_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_Okhsl_StraightA() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_Okhsl_StraightA",
        .definition = R"STR(
                                vec2 Coollab_Float_PremultipliedA_from_Okhsl_StraightA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_Okhsl(from.xyz);
                        return Cool_apply_premultiplied_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_from_Okhsl_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Float_from_Okhsl_PremultipliedA",
        .definition = R"STR(
                                float Coollab_Float_from_Okhsl_PremultipliedA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_Okhsl(from.xyz);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_Okhsl_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_Okhsl_PremultipliedA",
        .definition = R"STR(
                                vec2 Coollab_Float_StraightA_from_Okhsl_PremultipliedA(vec4 from)
                                {
                                    
                        float to = Cool_Float_from_Okhsl(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_straight_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_Okhsl_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_Okhsl_PremultipliedA",
        .definition = R"STR(
                                vec2 Coollab_Float_PremultipliedA_from_Okhsl_PremultipliedA(vec4 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        float to = Cool_Float_from_Okhsl(Cool_unpremultiply_color(from.xyz, from.a));
                        return Cool_apply_premultiplied_alpha_to_greyscale(to, from.a);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_from_Float() -> Function
{
    return {
        .name       = "Coollab_Oklab_from_Float",
        .definition = R"STR(
                                vec3 Coollab_Oklab_from_Float(float from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Float(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_StraightA_from_Float() -> Function
{
    return {
        .name       = "Coollab_Oklab_StraightA_from_Float",
        .definition = R"STR(
                                vec4 Coollab_Oklab_StraightA_from_Float(float from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Float(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_PremultipliedA_from_Float() -> Function
{
    return {
        .name       = "Coollab_Oklab_PremultipliedA_from_Float",
        .definition = R"STR(
                                vec4 Coollab_Oklab_PremultipliedA_from_Float(float from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Float(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_Oklab_from_Float_StraightA",
        .definition = R"STR(
                                vec3 Coollab_Oklab_from_Float_StraightA(vec2 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Float(Cool_premultiply_greyscale(from.x, from.y));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_StraightA_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_Oklab_StraightA_from_Float_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_StraightA_from_Float_StraightA(vec2 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Float(from.x);
                        return Cool_apply_straight_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_PremultipliedA_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_Oklab_PremultipliedA_from_Float_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_PremultipliedA_from_Float_StraightA(vec2 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Float(from.x);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Oklab_from_Float_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_Oklab_from_Float_PremultipliedA(vec2 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Float(from.x);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_StraightA_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Oklab_StraightA_from_Float_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_StraightA_from_Float_PremultipliedA(vec2 from)
                                {
                                    
                        vec3 to = Cool_Oklab_from_Float(Cool_unpremultiply_greyscale(from.x, from.y));
                        return Cool_apply_straight_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Oklab_PremultipliedA_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Oklab_PremultipliedA_from_Float_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Oklab_PremultipliedA_from_Float_PremultipliedA(vec2 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_Oklab_from_Float(Cool_unpremultiply_greyscale(from.x, from.y));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_from_Float() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_from_Float",
        .definition = R"STR(
                                vec3 Coollab_LinearRGB_from_Float(float from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Float(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_StraightA_from_Float() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_StraightA_from_Float",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_StraightA_from_Float(float from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Float(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_PremultipliedA_from_Float() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_PremultipliedA_from_Float",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_PremultipliedA_from_Float(float from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Float(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_from_Float_StraightA",
        .definition = R"STR(
                                vec3 Coollab_LinearRGB_from_Float_StraightA(vec2 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Float(Cool_premultiply_greyscale(from.x, from.y));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_StraightA_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_StraightA_from_Float_StraightA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_StraightA_from_Float_StraightA(vec2 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Float(from.x);
                        return Cool_apply_straight_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_PremultipliedA_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_PremultipliedA_from_Float_StraightA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_PremultipliedA_from_Float_StraightA(vec2 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Float(from.x);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_from_Float_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_LinearRGB_from_Float_PremultipliedA(vec2 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Float(from.x);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_StraightA_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_StraightA_from_Float_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_StraightA_from_Float_PremultipliedA(vec2 from)
                                {
                                    
                        vec3 to = Cool_LinearRGB_from_Float(Cool_unpremultiply_greyscale(from.x, from.y));
                        return Cool_apply_straight_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_LinearRGB_PremultipliedA_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_LinearRGB_PremultipliedA_from_Float_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_LinearRGB_PremultipliedA_from_Float_PremultipliedA(vec2 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_LinearRGB_from_Float(Cool_unpremultiply_greyscale(from.x, from.y));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_from_Float() -> Function
{
    return {
        .name       = "Coollab_sRGB_from_Float",
        .definition = R"STR(
                                vec3 Coollab_sRGB_from_Float(float from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Float(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_StraightA_from_Float() -> Function
{
    return {
        .name       = "Coollab_sRGB_StraightA_from_Float",
        .definition = R"STR(
                                vec4 Coollab_sRGB_StraightA_from_Float(float from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Float(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_PremultipliedA_from_Float() -> Function
{
    return {
        .name       = "Coollab_sRGB_PremultipliedA_from_Float",
        .definition = R"STR(
                                vec4 Coollab_sRGB_PremultipliedA_from_Float(float from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Float(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_sRGB_from_Float_StraightA",
        .definition = R"STR(
                                vec3 Coollab_sRGB_from_Float_StraightA(vec2 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Float(Cool_premultiply_greyscale(from.x, from.y));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_StraightA_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_sRGB_StraightA_from_Float_StraightA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_StraightA_from_Float_StraightA(vec2 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Float(from.x);
                        return Cool_apply_straight_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_PremultipliedA_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_sRGB_PremultipliedA_from_Float_StraightA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_PremultipliedA_from_Float_StraightA(vec2 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Float(from.x);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_sRGB_from_Float_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_sRGB_from_Float_PremultipliedA(vec2 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Float(from.x);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_StraightA_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_sRGB_StraightA_from_Float_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_StraightA_from_Float_PremultipliedA(vec2 from)
                                {
                                    
                        vec3 to = Cool_sRGB_from_Float(Cool_unpremultiply_greyscale(from.x, from.y));
                        return Cool_apply_straight_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_sRGB_PremultipliedA_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_sRGB_PremultipliedA_from_Float_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_sRGB_PremultipliedA_from_Float_PremultipliedA(vec2 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_sRGB_from_Float(Cool_unpremultiply_greyscale(from.x, from.y));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_from_Float() -> Function
{
    return {
        .name       = "Coollab_Okhsl_from_Float",
        .definition = R"STR(
                                vec3 Coollab_Okhsl_from_Float(float from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Float(from);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_StraightA_from_Float() -> Function
{
    return {
        .name       = "Coollab_Okhsl_StraightA_from_Float",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_StraightA_from_Float(float from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Float(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_PremultipliedA_from_Float() -> Function
{
    return {
        .name       = "Coollab_Okhsl_PremultipliedA_from_Float",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_PremultipliedA_from_Float(float from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Float(from);
                        return vec4(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_from_Float_StraightA",
        .definition = R"STR(
                                vec3 Coollab_Okhsl_from_Float_StraightA(vec2 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Float(Cool_premultiply_greyscale(from.x, from.y));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_StraightA_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_StraightA_from_Float_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_StraightA_from_Float_StraightA(vec2 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Float(from.x);
                        return Cool_apply_straight_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_PremultipliedA_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_PremultipliedA_from_Float_StraightA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_PremultipliedA_from_Float_StraightA(vec2 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Float(from.x);
                        return Cool_apply_premultiplied_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_from_Float_PremultipliedA",
        .definition = R"STR(
                                vec3 Coollab_Okhsl_from_Float_PremultipliedA(vec2 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Float(from.x);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_StraightA_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_StraightA_from_Float_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_StraightA_from_Float_PremultipliedA(vec2 from)
                                {
                                    
                        vec3 to = Cool_Okhsl_from_Float(Cool_unpremultiply_greyscale(from.x, from.y));
                        return Cool_apply_straight_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Okhsl_PremultipliedA_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Okhsl_PremultipliedA_from_Float_PremultipliedA",
        .definition = R"STR(
                                vec4 Coollab_Okhsl_PremultipliedA_from_Float_PremultipliedA(vec2 from)
                                {
                                    
                        // We need to unpremultiply for the color conversion, and re-premultiply afterwards
                        vec3 to = Cool_Okhsl_from_Float(Cool_unpremultiply_greyscale(from.x, from.y));
                        return Cool_apply_premultiplied_alpha_to_color(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_Float() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_Float",
        .definition = R"STR(
                                vec2 Coollab_Float_StraightA_from_Float(float from)
                                {
                                    
                        float to = (from);
                        return vec2(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_Float() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_Float",
        .definition = R"STR(
                                vec2 Coollab_Float_PremultipliedA_from_Float(float from)
                                {
                                    
                        float to = (from);
                        return vec2(to, 1.);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_Float_from_Float_StraightA",
        .definition = R"STR(
                                float Coollab_Float_from_Float_StraightA(vec2 from)
                                {
                                    
                        float to = (Cool_premultiply_greyscale(from.x, from.y));
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_Float_StraightA",
        .definition = R"STR(
                                vec2 Coollab_Float_PremultipliedA_from_Float_StraightA(vec2 from)
                                {
                                    
                        float to = (from.x);
                        return Cool_apply_premultiplied_alpha_to_greyscale(to, from.y);
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Float_from_Float_PremultipliedA",
        .definition = R"STR(
                                float Coollab_Float_from_Float_PremultipliedA(vec2 from)
                                {
                                    
                        float to = (from.x);
                        return to;
                    
                                }
                                )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_Float_PremultipliedA",
        .definition = R"STR(
                                vec2 Coollab_Float_StraightA_from_Float_PremultipliedA(vec2 from)
                                {
                                    
                        float to = (Cool_unpremultiply_greyscale(from.x, from.y));
                        return Cool_apply_straight_alpha_to_greyscale(to, from.y);
                    
                                }
                                )STR",
    };
}
