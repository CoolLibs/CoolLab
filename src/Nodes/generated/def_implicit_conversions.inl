/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "gen_primitive_types.py" and edit the "def_implicit_conversions" function there.
 * -----------------------------------------------------------------------------
 */

static auto gen_Coollab_Angle_from_Float() -> Function
{
    return {
        .name       = "Coollab_Angle_from_Float",
        .definition = R"STR(
                float Coollab_Angle_from_Float/*coollabdef*/(float x)
                {
                    return x * TAU;
                }
                )STR",
    };
}

static auto gen_Coollab_Float_from_Angle() -> Function
{
    return {
        .name       = "Coollab_Float_from_Angle",
        .definition = R"STR(
                float Coollab_Float_from_Angle/*coollabdef*/(float angle)
                {
                    return angle / TAU;
                }
            )STR",
    };
}

static auto gen_Coollab_Hue_from_Float() -> Function
{
    return {
        .name       = "Coollab_Hue_from_Float",
        .definition = R"STR(
                float Coollab_Hue_from_Float/*coollabdef*/(float x)
                {
                    return x; // No need to do anything for this conversion, the difference is purely semantic.
                }
                )STR",
    };
}

static auto gen_Coollab_Float_from_Hue() -> Function
{
    return {
        .name       = "Coollab_Float_from_Hue",
        .definition = R"STR(
                float Coollab_Float_from_Hue/*coollabdef*/(float x)
                {
                    return x; // No need to do anything for this conversion, the difference is purely semantic.
                }
                )STR",
    };
}

static auto gen_Coollab_Int_from_Float() -> Function
{
    return {
        .name       = "Coollab_Int_from_Float",
        .definition = R"STR(
                int Coollab_Int_from_Float/*coollabdef*/(float x)
                {
                    return int(floor(x));
                }
            )STR",
    };
}

static auto gen_Coollab_Float_from_Int() -> Function
{
    return {
        .name       = "Coollab_Float_from_Int",
        .definition = R"STR(
                float Coollab_Float_from_Int/*coollabdef*/(int x)
                {
                    return float(x);
                }
            )STR",
    };
}

static auto gen_Coollab_Bool_from_Float() -> Function
{
    return {
        .name       = "Coollab_Bool_from_Float",
        .definition = R"STR(
                bool Coollab_Bool_from_Float/*coollabdef*/(float x)
                {
                    return x > 0.5;
                }
            )STR",
    };
}

static auto gen_Coollab_Float_from_Bool() -> Function
{
    return {
        .name       = "Coollab_Float_from_Bool",
        .definition = R"STR(
                float Coollab_Float_from_Bool/*coollabdef*/(bool b)
                {
                    return b ? 1. : 0.;
                }
            )STR",
    };
}

static auto gen_Coollab_Direction2D_from_Angle() -> Function
{
    return {
        .name       = "Coollab_Direction2D_from_Angle",
        .definition = R"STR(
                vec2 Coollab_Direction2D_from_Angle/*coollabdef*/(float angle)
                {
                    return vec2(cos(angle), sin(angle));
                }
            )STR",
    };
}

static auto gen_Coollab_Direction2D_from_Float() -> Function
{
    return {
        .name       = "Coollab_Direction2D_from_Float",
        .definition = R"STR(
                vec2 Coollab_Direction2D_from_Float/*coollabdef*/(float x)
                {
                    float angle = x * TAU;
                    return vec2(cos(angle), sin(angle));
                }
            )STR",
    };
}

static auto gen_Coollab_Angle_from_Direction2D() -> Function
{
    return {
        .name       = "Coollab_Angle_from_Direction2D",
        .definition = R"STR(
                float Coollab_Angle_from_Direction2D/*coollabdef*/(vec2 dir)
                {
                    return dir.x != 0.f
                                ? atan(dir.y, dir.x)
                                : dir.y > 0.
                                    ? PI / 2.
                                    : -PI / 2.;
                }
            )STR",
    };
}

static auto gen_Coollab_Vec2_from_UV() -> Function
{
    return {
        .name       = "Coollab_Vec2_from_UV",
        .definition = R"STR(
                vec2 Coollab_Vec2_from_UV/*coollabdef*/(vec2 x)
                {
                    return x; // No need to do anything for this conversion, the difference is purely semantic.
                }
                )STR",
    };
}

static auto gen_Coollab_UV_from_Vec2() -> Function
{
    return {
        .name       = "Coollab_UV_from_Vec2",
        .definition = R"STR(
                vec2 Coollab_UV_from_Vec2/*coollabdef*/(vec2 x)
                {
                    return x; // No need to do anything for this conversion, the difference is purely semantic.
                }
                )STR",
    };
}

static auto gen_Coollab_UV_from_Void() -> Function
{
    return {
        .name       = "Coollab_UV_from_Void",
        .definition = R"STR(
                vec2 Coollab_UV_from_Void/*coollabdef*/()
                {
                    return coollab_context.uv;
                }
            )STR",
    };
}

static auto gen_Coollab_Particle2D_from_Void() -> Function
{
    return {
        .name       = "Coollab_Particle2D_from_Void",
        .definition = R"STR(
                Particle2D Coollab_Particle2D_from_Void/*coollabdef*/()
                {
                    return coollab_context.particle;
                }
            )STR",
    };
}

static auto gen_Coollab_Particle3D_from_Void() -> Function
{
    return {
        .name       = "Coollab_Particle3D_from_Void",
        .definition = R"STR(
                Particle3D Coollab_Particle3D_from_Void/*coollabdef*/()
                {
                    return coollab_context.particle;
                }
            )STR",
    };
}

static auto gen_Coollab_Angle_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_Angle_from_Float_StraightA",
        .definition = R"STR(
                        float Coollab_Angle_from_Float_StraightA/*coollabdef*/(vec2 x)
                        {
                            return Coollab_Angle_from_Float(Coollab_Float_from_Float_StraightA(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Angle_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Angle_from_Float_PremultipliedA",
        .definition = R"STR(
                        float Coollab_Angle_from_Float_PremultipliedA/*coollabdef*/(vec2 x)
                        {
                            return Coollab_Angle_from_Float(Coollab_Float_from_Float_PremultipliedA(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_Angle() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_Angle",
        .definition = R"STR(
                        vec2 Coollab_Float_StraightA_from_Angle/*coollabdef*/(float x)
                        {
                            return Coollab_Float_StraightA_from_Float(Coollab_Float_from_Angle(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_Angle() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_Angle",
        .definition = R"STR(
                        vec2 Coollab_Float_PremultipliedA_from_Angle/*coollabdef*/(float x)
                        {
                            return Coollab_Float_PremultipliedA_from_Float(Coollab_Float_from_Angle(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Hue_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_Hue_from_Float_StraightA",
        .definition = R"STR(
                        float Coollab_Hue_from_Float_StraightA/*coollabdef*/(vec2 x)
                        {
                            return Coollab_Hue_from_Float(Coollab_Float_from_Float_StraightA(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Hue_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Hue_from_Float_PremultipliedA",
        .definition = R"STR(
                        float Coollab_Hue_from_Float_PremultipliedA/*coollabdef*/(vec2 x)
                        {
                            return Coollab_Hue_from_Float(Coollab_Float_from_Float_PremultipliedA(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_Hue() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_Hue",
        .definition = R"STR(
                        vec2 Coollab_Float_StraightA_from_Hue/*coollabdef*/(float x)
                        {
                            return Coollab_Float_StraightA_from_Float(Coollab_Float_from_Hue(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_Hue() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_Hue",
        .definition = R"STR(
                        vec2 Coollab_Float_PremultipliedA_from_Hue/*coollabdef*/(float x)
                        {
                            return Coollab_Float_PremultipliedA_from_Float(Coollab_Float_from_Hue(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Int_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_Int_from_Float_StraightA",
        .definition = R"STR(
                        int Coollab_Int_from_Float_StraightA/*coollabdef*/(vec2 x)
                        {
                            return Coollab_Int_from_Float(Coollab_Float_from_Float_StraightA(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Int_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Int_from_Float_PremultipliedA",
        .definition = R"STR(
                        int Coollab_Int_from_Float_PremultipliedA/*coollabdef*/(vec2 x)
                        {
                            return Coollab_Int_from_Float(Coollab_Float_from_Float_PremultipliedA(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_Int() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_Int",
        .definition = R"STR(
                        vec2 Coollab_Float_StraightA_from_Int/*coollabdef*/(int x)
                        {
                            return Coollab_Float_StraightA_from_Float(Coollab_Float_from_Int(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_Int() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_Int",
        .definition = R"STR(
                        vec2 Coollab_Float_PremultipliedA_from_Int/*coollabdef*/(int x)
                        {
                            return Coollab_Float_PremultipliedA_from_Float(Coollab_Float_from_Int(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Bool_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_Bool_from_Float_StraightA",
        .definition = R"STR(
                        bool Coollab_Bool_from_Float_StraightA/*coollabdef*/(vec2 x)
                        {
                            return Coollab_Bool_from_Float(Coollab_Float_from_Float_StraightA(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Bool_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Bool_from_Float_PremultipliedA",
        .definition = R"STR(
                        bool Coollab_Bool_from_Float_PremultipliedA/*coollabdef*/(vec2 x)
                        {
                            return Coollab_Bool_from_Float(Coollab_Float_from_Float_PremultipliedA(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Float_StraightA_from_Bool() -> Function
{
    return {
        .name       = "Coollab_Float_StraightA_from_Bool",
        .definition = R"STR(
                        vec2 Coollab_Float_StraightA_from_Bool/*coollabdef*/(bool x)
                        {
                            return Coollab_Float_StraightA_from_Float(Coollab_Float_from_Bool(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Float_PremultipliedA_from_Bool() -> Function
{
    return {
        .name       = "Coollab_Float_PremultipliedA_from_Bool",
        .definition = R"STR(
                        vec2 Coollab_Float_PremultipliedA_from_Bool/*coollabdef*/(bool x)
                        {
                            return Coollab_Float_PremultipliedA_from_Float(Coollab_Float_from_Bool(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Direction2D_from_Float_StraightA() -> Function
{
    return {
        .name       = "Coollab_Direction2D_from_Float_StraightA",
        .definition = R"STR(
                        vec2 Coollab_Direction2D_from_Float_StraightA/*coollabdef*/(vec2 x)
                        {
                            return Coollab_Direction2D_from_Float(Coollab_Float_from_Float_StraightA(x));
                        }
                    )STR",
    };
}

static auto gen_Coollab_Direction2D_from_Float_PremultipliedA() -> Function
{
    return {
        .name       = "Coollab_Direction2D_from_Float_PremultipliedA",
        .definition = R"STR(
                        vec2 Coollab_Direction2D_from_Float_PremultipliedA/*coollabdef*/(vec2 x)
                        {
                            return Coollab_Direction2D_from_Float(Coollab_Float_from_Float_PremultipliedA(x));
                        }
                    )STR",
    };
}
