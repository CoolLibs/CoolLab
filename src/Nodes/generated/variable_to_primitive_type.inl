/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "gen_primitive_types.py" and edit the "variable_to_primitive_type" function there.
 * -----------------------------------------------------------------------------
 */

if (std::holds_alternative<Cool::SharedVariable<bool>>(var))
    return PrimitiveType::Bool;

if (std::holds_alternative<Cool::SharedVariable<int>>(var))
    return PrimitiveType::Int;

if (std::holds_alternative<Cool::SharedVariable<float>>(var))
    return PrimitiveType::Float;

if (std::holds_alternative<Cool::SharedVariable<Cool::TimeSpeed>>(var))
    return PrimitiveType::Float;

if (std::holds_alternative<Cool::SharedVariable<Cool::Time>>(var))
    return PrimitiveType::Float;

if (std::holds_alternative<Cool::SharedVariable<glm::vec2>>(var))
    return PrimitiveType::Vec2;

if (std::holds_alternative<Cool::SharedVariable<glm::vec3>>(var))
    return PrimitiveType::Vec3;

if (std::holds_alternative<Cool::SharedVariable<glm::vec4>>(var))
    return PrimitiveType::Vec4;

if (std::holds_alternative<Cool::SharedVariable<glm::mat2>>(var))
    return PrimitiveType::Mat2;

if (std::holds_alternative<Cool::SharedVariable<glm::mat3>>(var))
    return PrimitiveType::Mat3;

if (std::holds_alternative<Cool::SharedVariable<glm::mat4>>(var))
    return PrimitiveType::Mat4;

if (std::holds_alternative<Cool::SharedVariable<Cool::Point2D>>(var))
    return PrimitiveType::UV;

if (std::holds_alternative<Cool::SharedVariable<Cool::Angle>>(var))
    return PrimitiveType::Angle;

if (std::holds_alternative<Cool::SharedVariable<Cool::Hue>>(var))
    return PrimitiveType::Hue;

if (std::holds_alternative<Cool::SharedVariable<Cool::Direction2D>>(var))
    return PrimitiveType::Direction2D;

if (std::holds_alternative<Cool::SharedVariable<Cool::Color>>(var) && std::get<Cool::SharedVariable<Cool::Color>>(var).get_ref().desired_color_space == static_cast<int>(Cool::ColorSpace::Oklab))
    return PrimitiveType::Oklab;

if (std::holds_alternative<Cool::SharedVariable<Cool::ColorAndAlpha>>(var) && std::get<Cool::SharedVariable<Cool::ColorAndAlpha>>(var).get_ref().desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::Oklab_PremultipliedA))
    return PrimitiveType::Oklab_PremultipliedA;

if (std::holds_alternative<Cool::SharedVariable<Cool::ColorAndAlpha>>(var) && std::get<Cool::SharedVariable<Cool::ColorAndAlpha>>(var).get_ref().desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::Oklab_StraightA))
    return PrimitiveType::Oklab_StraightA;

if (std::holds_alternative<Cool::SharedVariable<Cool::Color>>(var) && std::get<Cool::SharedVariable<Cool::Color>>(var).get_ref().desired_color_space == static_cast<int>(Cool::ColorSpace::LinearRGB))
    return PrimitiveType::LinearRGB;

if (std::holds_alternative<Cool::SharedVariable<Cool::ColorAndAlpha>>(var) && std::get<Cool::SharedVariable<Cool::ColorAndAlpha>>(var).get_ref().desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::LinearRGB_PremultipliedA))
    return PrimitiveType::LinearRGB_PremultipliedA;

if (std::holds_alternative<Cool::SharedVariable<Cool::ColorAndAlpha>>(var) && std::get<Cool::SharedVariable<Cool::ColorAndAlpha>>(var).get_ref().desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::LinearRGB_StraightA))
    return PrimitiveType::LinearRGB_StraightA;

if (std::holds_alternative<Cool::SharedVariable<Cool::Color>>(var) && std::get<Cool::SharedVariable<Cool::Color>>(var).get_ref().desired_color_space == static_cast<int>(Cool::ColorSpace::sRGB))
    return PrimitiveType::sRGB;

if (std::holds_alternative<Cool::SharedVariable<Cool::ColorAndAlpha>>(var) && std::get<Cool::SharedVariable<Cool::ColorAndAlpha>>(var).get_ref().desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::sRGB_PremultipliedA))
    return PrimitiveType::sRGB_PremultipliedA;

if (std::holds_alternative<Cool::SharedVariable<Cool::ColorAndAlpha>>(var) && std::get<Cool::SharedVariable<Cool::ColorAndAlpha>>(var).get_ref().desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::sRGB_StraightA))
    return PrimitiveType::sRGB_StraightA;

if (std::holds_alternative<Cool::SharedVariable<Cool::Color>>(var) && std::get<Cool::SharedVariable<Cool::Color>>(var).get_ref().desired_color_space == static_cast<int>(Cool::ColorSpace::Okhsl))
    return PrimitiveType::Okhsl;

if (std::holds_alternative<Cool::SharedVariable<Cool::ColorAndAlpha>>(var) && std::get<Cool::SharedVariable<Cool::ColorAndAlpha>>(var).get_ref().desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::Okhsl_PremultipliedA))
    return PrimitiveType::Okhsl_PremultipliedA;

if (std::holds_alternative<Cool::SharedVariable<Cool::ColorAndAlpha>>(var) && std::get<Cool::SharedVariable<Cool::ColorAndAlpha>>(var).get_ref().desired_color_space == static_cast<int>(Cool::ColorAndAlphaSpace::Okhsl_StraightA))
    return PrimitiveType::Okhsl_StraightA;