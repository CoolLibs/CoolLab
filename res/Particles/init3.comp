#include "_COOL_RES_/shaders/math.glsl"

layout(std430, binding = 0) buffer _positions_buffer
{
    float _positions[];
};

layout(std430, binding = 1) buffer _velocities_buffer
{
    float _velocities[];
};

layout(std430, binding = 2) buffer _sizes_buffer
{
    float _sizes[];
};

layout(std430, binding = 3) buffer _lifetimes_buffer
{
    float _lifetimes[];
};

layout(std430, binding = 4) buffer _colors_buffer
{
    float _colors[];
};

struct Particle3D {
    vec3  position;
    vec3  velocity;
    vec3  acceleration;
    float size;
    float lifetime;
    vec4 color;
};

void cool_main()
{
    uint       gid = gl_GlobalInvocationID.x;
    Particle3D particle;
    particle.position = hash_0_to_1_3D_to_3D(vec3(gid, 1, 1)) * 2 - 1; // -1.0 to 1.0
    particle.velocity = vec3(0.0);
    particle.size     = 0.01;
    particle.lifetime = -1.0;
    particle.color    = vec4(1.0);

    _positions[gid * 3]      = particle.position.x;
    _positions[gid * 3 + 1]  = particle.position.y;
    _positions[gid * 3 + 2]  = particle.position.z;
    _velocities[gid * 3]     = particle.velocity.x;
    _velocities[gid * 3 + 1] = particle.velocity.y;
    _velocities[gid * 3 + 2] = particle.velocity.z;
    _sizes[gid]              = particle.size;
    _lifetimes[gid]          = particle.lifetime;
    _colors[gid * 4]         = particle.color.x;
    _colors[gid * 4 + 1]     = particle.color.y;
    _colors[gid * 4 + 2]     = particle.color.z;
    _colors[gid * 4 + 3]     = particle.color.w;
}
