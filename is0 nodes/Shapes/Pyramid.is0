`
float _pyramid_Half_Space_SDF(vec3 pos, vec3 normal, vec3 origin)
{
    return dot(pos - origin, normal);
}
`

[] (vec3 pos) {
    const vec3 tip = vec3(0., 0., Height / 2.);
    float d = -pos.z - Height / 2.; // Distance to the base
    for (int i = 0; i < Faces_Count; ++i) {
        const float c1 = Base_Radius * cos( i      * TAU / Faces_Count);
        const float s1 = Base_Radius * sin( i      * TAU / Faces_Count);
        const float c2 = Base_Radius * cos((i + 1) * TAU / Faces_Count);
        const float s2 = Base_Radius * sin((i + 1) * TAU / Faces_Count);
        const vec3 polygon_vertex_1 = vec3(c1, s1, 0.);
        const vec3 polygon_vertex_2 = vec3(c2, s2, 0.);
        d = smooth_max_polynomial(d,
                _pyramid_Half_Space_SDF(pos, normalize(cross(polygon_vertex_1 - tip, polygon_vertex_2 - tip)), tip),
                Smoothing
        );
    }
    return d;
}

int {
    "Name": "Faces Count",
    "Default": 4,
    "Min": 3,
    "Max": 20
}

float {
    "Name": "Base Radius",
    "Default": 1.0,
    "Min": 0.001,
    "Max": 5
}

float {
    "Name": "Height",
    "Default": 2.5,
    "Min": 0.0,
    "Max": 10.0
}

float {
    "Name": "Smoothing",
    "Default": 0.0,
    "Min": 0.0,
    "Max": 0.5
}