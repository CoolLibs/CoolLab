`
float _random_spheres_Sphere(vec3 i, vec3 f, vec3 c){
    float rad = 0.5*hash_0_to_1(i+c);
    return length(f-vec3(c)) - rad;
}
`

[] (vec3 p){
    vec3 i = floor(p);
    vec3 f = fract(p);
    return min(min(min(_random_spheres_Sphere(i,f,vec3(0,0,0)),
                       _random_spheres_Sphere(i,f,vec3(0,0,1))),
                   min(_random_spheres_Sphere(i,f,vec3(0,1,0)),
                       _random_spheres_Sphere(i,f,vec3(0,1,1)))),
               min(min(_random_spheres_Sphere(i,f,vec3(1,0,0)),
                       _random_spheres_Sphere(i,f,vec3(1,0,1))),
                   min(_random_spheres_Sphere(i,f,vec3(1,1,0)),
                       _random_spheres_Sphere(i,f,vec3(1,1,1)))));
}