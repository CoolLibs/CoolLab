# ---HOW TO---
# Create a function with the same name as the file you want to generate
# that returns a string with the content you want to generate.
#
# Then call `generate("my_function_name")`.
#
# You can use `all_variable_types()` to get all the variable types we use in CoolLab.
# ------------


def clear_generated_folder():
    import shutil
    import os
    shutil.rmtree(output_folder())
    os.makedirs(output_folder())


def output_folder():
    import os
    from pathlib import Path
    root_folder = Path(__file__).parent
    return os.path.join(root_folder, "src/generated")


def generate(name):
    generate_file(name, eval(f"{name}()"))


def generate_file(name, content):
    import os
    with open(os.path.join(output_folder(), name) + ".inl", 'w') as f:
        f.write(heading(name) + content)


def heading(function_name):
    import os
    return f"""/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "{os.path.basename(__file__)}" and edit the "{function_name}" function there.
 * -----------------------------------------------------------------------------
 */
"""


def all_variable_types():
    return [
        "int",
        "float",
        "glm::vec2",
        "glm::vec3",
        "Cool::Camera",
    ]


def all_variable_includes():
    return f"""
#include <Cool/Camera/Camera.h>
"""


def register_set_value_commands():
    commands = ""
    reversible_commands = ""
    for variable_type in all_variable_types():
        commands += f"LAB_REGISTER_COMMAND(Lab::Command_SetValue<{variable_type}>)\n"
        reversible_commands += f"LAB_REGISTER_REVERSIBLE_COMMAND(Lab::ReversibleCommand_SetValue<{variable_type}>)\n"
    return f"""
{commands}
{reversible_commands}
"""


def VariableRegistries():
    return "\n" + "using VariableRegistries = reg::Registries<\n" + ",\n".join(
        map(lambda var_type: f"    {var_type}", all_variable_types())) + "\n>;"


def AnyInputSlot():
    return "\n" + "using AnyInputSlot = std::variant<\n" + ",\n".join(
        map(lambda var_type: f"    InputSlot<{var_type}>", all_variable_types())) + "\n>;"


def AnyInputSlotRef():
    return "\n" + "using AnyInputSlotRef = std::variant<\n" + ",\n".join(
        map(lambda var_type: f"    std::reference_wrapper<InputSlot<{var_type}>>", all_variable_types())) + "\n>;"


def AnyInputSlotRefToConst():
    return "\n" + "using AnyInputSlotRefToConst = std::variant<\n" + ",\n".join(
        map(lambda var_type: f"    std::reference_wrapper<const InputSlot<{var_type}>>", all_variable_types())) + "\n>;"


clear_generated_folder()
generate("register_set_value_commands")
generate("VariableRegistries")
generate("AnyInputSlot")
generate("AnyInputSlotRef")
generate("AnyInputSlotRefToConst")
generate("all_variable_includes")
