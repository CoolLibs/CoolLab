// To learn how to write nodes, see https://coollab-art.com/Tutorials/Writing%20Nodes/Intro

INPUT $UV->SignedDistance 'Shape';
INPUT int 'Iterations';
INPUT float 'Fix Artefacts';

#include "_ROOT_FOLDER_/res/collision.glsl"

$vec set_length($vec vector, float new_length)
{
    float len = length(vector);
    if (len < 0.000001)
        return $vec(new_length, 0.);
    return vector / len * new_length;
}

$IntersectionResult intersect_with_shape($Particle particle, bool limit_intersection)
{
    const float SURF_DIST = 0.0000001;
    float       t         = 0.;

    const $vec ZERO = $vec(0.); // HACK to work around a bug in particle_nodes_generator.py that prevents us to use a macro as a parameter of another macro
    for (int i = 0; i < 'Iterations'; i++)
    {
        $vec  velocity = particle.velocity * _delta_time;
        $vec  point    = particle.position + set_length(velocity, 1.) * t;
        float d        = abs('Shape'(point));
        t += d * (1. - 'Fix Artefacts');

        if (limit_intersection && t > length(velocity))
            return $IntersectionResult(false, ZERO, 0.);

        if (d < SURF_DIST && t > 0)
            return $IntersectionResult(true, point, t);
    }
    return $IntersectionResult(false, ZERO, 0.);
}

$Particle main($Particle Particle)
{
    // TODO(Particles) Y a des fuites dans les collisions. Ideally this effect would be applied after the velocity has been updated and before the position has been updated.

    // Must be between 0 and 1 (exclusive of 1). The greater the value, the more precise the collision, but it also increases the likelihood of leaks.
    // const float offset_from_side = 0.5;

    float distance = 'Shape'(Particle.position);

    if (distance < 0.)
    {
        $IntersectionResult intersection = intersect_with_shape(Particle, false);
        Particle.position += set_length(Particle.velocity, intersection.distance_along_ray + Particle.size);
    }
    else
    {
        $IntersectionResult intersection = intersect_with_shape(Particle, true);
        // float                original_length = length(Particle.velocity);

        // int compteur = 0;
        // while (intersection.has_intersected && compteur < 100)
        if (intersection.has_intersected)
        {
            $vec shape_normal = normalize($gradient(intersection.intersection_point, 'Shape'));
            Particle.position = intersection.intersection_point;

            // float vel_length = length(Particle.velocity);
            // Particle.velocity *= 1 - intersection.distance_along_ray * offset_from_side / vel_length;
            Particle.velocity = reflect(Particle.velocity, shape_normal);

            // intersection = intersect_with_shape(Particle, true);
            // compteur++;
        }

        // Particle.velocity = set_length(Particle.velocity, original_length);
    }
    return Particle;
}
