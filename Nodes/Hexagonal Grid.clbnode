INPUT float `SizeGrid`;

INPUT Point2D `Center`;

OUTPUT float `Index X`;
OUTPUT float `Index Y`;

float sqrt_3 = 1.73205;


float HexDist(vec2 p){
    vec2 abs_uv = abs(p);
    float sqrt_3 = 1.73205;

    float val = dot(abs_uv, normalize(vec2(1.,sqrt_3)));
    val = max(val, abs_uv.x);
    return  val;
}
// pix -> id of the first grid
vec2 pixToID1(vec2 uv){
    return floor((uv+vec2(0, 0.25)) / vec2(1.,sqrt(3)) - vec2(0, 0.25));
}

vec2 id1ToCenter(vec2 id){
    return (id + 0.5)*vec2(1.,sqrt(3));
}

// pix -> id of the second grid
vec2 id2ToCenter(vec2 id){
return (id +1.)*vec2(1.,sqrt(3));
}
vec2 pixToID2(vec2 uv){
    return floor((uv-vec2(0.5)+vec2(0, 0.25))/vec2(1.,sqrt(3))-vec2(0, 0.25));
}


vec2 IDtoCenterPix(vec2 id){
    return (vec2(id.x - id.y*.5, sqrt(3)/2* id.y) +vec2(0.5,0.5*sqrt(3)))/`SizeGrid`;
}


vec2 HexCoordID(vec2 uv){

    vec2 id1 = pixToID1(uv);
    vec2 id2 = pixToID2(uv);

    vec2 center1 = id1ToCenter(id1);
    vec2 center2 = id2ToCenter(id2);


    vec2 id = dot(uv-center1,uv-center1) <= dot(uv-center2,uv-center2) 
    ? id1.x * vec2(1, 0) +id1.y *vec2(1,2)  
    : id2.x * vec2(1, 0) +id2.y *vec2(1,2) + vec2(1, 1) ;
    return id;
}

vec4 HexCoord(vec2 uv){
    float sqrt_3 = 1.73205;

    vec2 r = vec2(1.,sqrt_3);
    vec2 h = r*0.5;

    vec2 a = mod(uv,r)-h;
    vec2 b = mod(uv-h,r)-h;
    
    vec2 gv = dot(a,a) < dot(b,b) ? a : b;

    vec2 id = HexCoordID(uv);

    return vec4 (gv.x, gv.y, id.x, id.y);
}

vec2 main(UV uv)
{

    uv*=`SizeGrid`;

    vec2 gv = HexCoord(uv).xy;
    vec2 id = HexCoord(uv).zw;

    `Index X` = id.x;
    `Index Y` = id.y;

    return gv;

}
