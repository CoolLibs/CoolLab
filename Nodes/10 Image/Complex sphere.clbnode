#include "_ROOT_FOLDER_/res/c3ga.glsl"

sRGB main(UV uv)
{
    Mvec e1, e2, e3, e4, e5, e0, ei;
    e1.c1    = 1.;
    e2.c2    = 1.;
    e3.c3    = 1.;
    e4.c4    = 1.;
    e5.c5    = 1.;
    e0       = add(e4, e5);
    ei       = scale(sub(e5, e4), 0.5);
    vec3 col = vec3(0.);
    // Setup camera

    Mvec ro = fromPoint(cool_ray_origin(unnormalize_uv(uv)));
    Mvec rd = fromDirection(cool_ray_direction(unnormalize_uv(uv)));
    // Scene params
    float sphereRadius = 2.5;
    Mvec  sphereCenter = fromPoint(vec3(0.));
    Mvec  dualSphere   = createDualSphere(vec3(0.), sphereRadius * sphereRadius);
    // Ray Tracing
    Mvec rayLine            = outer(outer(ro, rd), ei);
    Mvec intersectionPtPair = dual(outer(dualSphere, dual(rayLine)));
    // Normal
    Mvec p1, p2;
    extractPointPair(intersectionPtPair, p1, p2);
    vec3 ro2p2 = vec3(
        p2.c1 - ro.c1,
        p2.c2 - ro.c2,
        p2.c3 - ro.c3
    );
    Mvec normal;
    if (dot(ro2p2, vec3(rd.c1, rd.c2, rd.c3)) < 0)
    {
        normal = normalized(sub(p1, sphereCenter));
    }
    else
    {
        normal = normalized(sub(p2, sphereCenter));
    }

    col = vec3(normal.c1, normal.c2, normal.c3);
    //
    col = pow(abs(col), vec3(.4545)); // gamma correction
    return col;
}