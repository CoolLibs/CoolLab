// To learn how to write nodes, see https://coollab-art.com/Tutorials/Writing%20Nodes/Intro
// Inspired by https://iquilezles.org/articles/distfunctions2d/
INPUT float 'Thickness';
INPUT UV->float 'Mask';

INPUT float 'Proba';
INPUT int 'Width';
INPUT int 'Height';
INPUT float 'Smoothing';

float segment(vec2 uv, vec2 p1, vec2 p2)
{
    vec2  pa = uv - p1;
    vec2  ba = p2 - p1;
    float h  = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
    return length(pa - ba * h) - 'Thickness';
}

SignedDistance main(UV uv)
{
    float dist = FLT_MAX;
    for (int i = 0; i < 'Width'; ++i)
    {
        for (int j = 0; j < 'Height'; ++j)
        {
            if ('Mask'(vec2(i + 0.5, j)) < 'Proba')
                dist = smooth_min_polynomial(dist, segment(uv, vec2(i, j), vec2(i + 1, j)), 'Smoothing');
            if ('Mask'(vec2(i, j + 0.5)) < 'Proba')
                dist = smooth_min_polynomial(dist, segment(uv, vec2(i, j), vec2(i, j + 1)), 'Smoothing');
        }
    }
    // dist = smooth_min_polynomial(dist, segment(uv, vec2('Width', 0), vec2('Width', 'Height')), 'Smoothing');
    // dist = smooth_min_polynomial(dist, segment(uv, vec2(0, 0), vec2(0, 'Height')), 'Smoothing');
    // dist = smooth_min_polynomial(dist, segment(uv, vec2(0, 0), vec2('Width', 0)), 'Smoothing');
    return dist;
}